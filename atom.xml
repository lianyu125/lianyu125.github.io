<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小玉的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.devzou.com/"/>
  <updated>2018-08-22T13:38:06.165Z</updated>
  <id>https://blog.devzou.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS面试题</title>
    <link href="https://blog.devzou.com/2018/08/05/ios/2018-08-12-iOS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://blog.devzou.com/2018/08/05/ios/2018-08-12-iOS面试题/</id>
    <published>2018-08-04T23:10:09.000Z</published>
    <updated>2018-08-22T13:38:06.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个NSObject对象占用多少内存"><a href="#一个NSObject对象占用多少内存" class="headerlink" title="一个NSObject对象占用多少内存"></a>一个NSObject对象占用多少内存</h2><p>系统分配了16个字节给NSObject对象<br>但NSObject对象内部只使用了8个字节的空间(64bit环境下)</p><h2 id="对象的isa指针指向哪里"><a href="#对象的isa指针指向哪里" class="headerlink" title="对象的isa指针指向哪里"></a>对象的isa指针指向哪里</h2><p>instance对象的isa指向class<br>当调用对象方法时，通过instance对象的isa找到class 对象，最后找到对象方法的实现进行调用<br>class 的isa指向meta-class<br>当调用类方法时，通过class的isa找到meta-class，最后找到类方法的实现进行调用<br>meta-class的isa指向基类的meta-class对象</p><h2 id="OC的类信息存放在哪里"><a href="#OC的类信息存放在哪里" class="headerlink" title="OC的类信息存放在哪里"></a>OC的类信息存放在哪里</h2><p>对象方法、属性、成员变量、协议信息，存放在class对象中<br>类方法，存放在meta-class对象中<br>成员变量的具体值，存放在instance对象中</p><h2 id="iOS用什么方式实现对一个对象的KVO-KVO的本质是什么"><a href="#iOS用什么方式实现对一个对象的KVO-KVO的本质是什么" class="headerlink" title="iOS用什么方式实现对一个对象的KVO?(KVO的本质是什么)"></a>iOS用什么方式实现对一个对象的KVO?(KVO的本质是什么)</h2><p>利用runtimeAPI动态生成一个子类，并且让instance对象的isa指向这个全新的子类<br>当修改instance对象的属性时，会调用Foundation的_NSSetXXXXValueAndNotify函数<br>willChangeValueForKey:<br>父类原来的setter方法<br>didChangeValueForKey:<br>内部会触发监听器(Observer)的监听方法(oberserveValueForKeyPath:ofObject:change:context:)</p><h2 id="如何手动触发KVO"><a href="#如何手动触发KVO" class="headerlink" title="如何手动触发KVO"></a>如何手动触发KVO</h2><p>手动调用willChangeValueForKey和didChangeValueForKey</p><h2 id="直接修改成员变量会触发KVO吗"><a href="#直接修改成员变量会触发KVO吗" class="headerlink" title="直接修改成员变量会触发KVO吗"></a>直接修改成员变量会触发KVO吗</h2><p>不会</p><h2 id="通过KVC修改属性的值，会触发KVO吗"><a href="#通过KVC修改属性的值，会触发KVO吗" class="headerlink" title="通过KVC修改属性的值，会触发KVO吗"></a>通过KVC修改属性的值，会触发KVO吗</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一个NSObject对象占用多少内存&quot;&gt;&lt;a href=&quot;#一个NSObject对象占用多少内存&quot; class=&quot;headerlink&quot; title=&quot;一个NSObject对象占用多少内存&quot;&gt;&lt;/a&gt;一个NSObject对象占用多少内存&lt;/h2&gt;&lt;p&gt;系统分配了1
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式之策略模式</title>
    <link href="https://blog.devzou.com/2018/08/05/ios/2018-07-21-iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.devzou.com/2018/08/05/ios/2018-07-21-iOS设计模式之策略模式/</id>
    <published>2018-08-04T23:10:09.000Z</published>
    <updated>2018-08-06T16:52:34.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><ol><li>完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。</li><li>在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。<a id="more"></a></li><li>在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。</li><li>除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。</li><li>为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。<h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2>策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。<h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2>策略模式包含如下角色：</li></ol><ul><li>Context: 环境类</li><li>Strategy: 抽象策略类</li><li>ConcreteStrategy: 具体策略类<br><img src="" alt=""><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2></li></ul><ol><li>策略模式是一个比较容易理解和使用的设计模式，策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是“准备一组算法，并将每一个算法封装起来，使得它们可以互换”。</li><li>在策略模式中，应当由客户端自己决定在什么情况下使用什么具体策略角色。</li><li>策略模式仅仅封装算法，提供新算法插入到已有系统中，以及老算法从系统中“退休”的方便，策略模式并不决定在何时使用何种算法，算法的选择由客户端来决定。这在一定程度上提高了系统的灵活性，但是客户端需要理解所有具体策略类之间的区别，以便选择合适的算法，这也是策略模式的缺点之一，在一定程度上增加了客户端的使用难度。<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2></li></ol><p>在以下情况下可以使用策略模式：</p><ul><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li><li>一个系统需要动态地在几种算法中选择一种。</li><li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li><li><p>不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。</p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>策略模式与状态模式</p></li><li><p>可以通过环境类状态的个数来决定是使用策略模式还是状态模式。</p></li><li>策略模式的环境类自己选择一个具体策略类，具体策略类无须关心环境类；而状态模式的环境类由于外在因素需要放进一个具体状态中，以便通过其方法实现状态的切换，因此环境类和状态类之间存在一种双向的关联关系。</li><li>使用策略模式时，客户端需要知道所选的具体策略是哪一个，而使用状态模式时，客户端无须关心具体状态，环境类的状态会根据用户的操作自动转换。</li><li>如果系统中某个类的对象存在多种状态，不同状态下行为有差异，而且这些状态之间可以发生转换时使用状态模式；如果系统中某个类的某一行为存在多种实现方式，而且这些实现方式可以互换时使用策略模式。<h2 id="优点-amp-amp-缺点"><a href="#优点-amp-amp-缺点" class="headerlink" title="优点&amp;&amp;缺点"></a>优点&amp;&amp;缺点</h2><h3 id="策略模式的优点"><a href="#策略模式的优点" class="headerlink" title="策略模式的优点"></a>策略模式的优点</h3></li></ul><ol><li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。</li><li>策略模式提供了管理相关的算法族的办法。</li><li>策略模式提供了可以替换继承关系的办法。</li><li>使用策略模式可以避免使用多重条件转移语句。<h3 id="策略模式的缺点"><a href="#策略模式的缺点" class="headerlink" title="策略模式的缺点"></a>策略模式的缺点</h3></li></ol><p>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。<br>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。&lt;/li&gt;
&lt;li&gt;在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之KVC底层原理</title>
    <link href="https://blog.devzou.com/2018/08/05/ios/2018-08-22-KVC/"/>
    <id>https://blog.devzou.com/2018/08/05/ios/2018-08-22-KVC/</id>
    <published>2018-08-04T23:10:09.000Z</published>
    <updated>2018-08-22T13:37:33.079Z</updated>
    
    <content type="html"><![CDATA[<p>KVC的全称是Key-Value Coding 俗称键值编码，可以通过一个key来访问某个属性<br>常见的API有</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key</div><div class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKeyPath:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)keyPath</div><div class="line">- (<span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;KVC的全称是Key-Value Coding 俗称键值编码，可以通过一个key来访问某个属性&lt;br&gt;常见的API有&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cla
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发之Category</title>
    <link href="https://blog.devzou.com/2018/08/05/ios/2018-08-23-Category/"/>
    <id>https://blog.devzou.com/2018/08/05/ios/2018-08-23-Category/</id>
    <published>2018-08-04T23:10:09.000Z</published>
    <updated>2018-08-23T00:27:16.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Category实现原理"><a href="#Category实现原理" class="headerlink" title="Category实现原理"></a>Category实现原理</h2><h3 id="category的结构"><a href="#category的结构" class="headerlink" title="category的结构"></a>category的结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">struct category_t &#123;</div><div class="line">    const char *name;</div><div class="line">    classref_t cls;</div><div class="line">    struct method_list_t *instanceMethods;</div><div class="line">    struct method_list_t *classMethods;</div><div class="line">    struct protocol_list_t *protocols;</div><div class="line">    struct property_list_t *instanceProperties;</div><div class="line">    // Fields below this point are not always present on disk.</div><div class="line">    struct property_list_t *_classProperties;</div><div class="line"></div><div class="line">    method_list_t *methodsForMeta(bool isMeta) &#123;</div><div class="line">        if (isMeta) return classMethods;</div><div class="line">        else return instanceMethods;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    property_list_t *propertiesForMeta(bool isMeta, struct header_info *hi);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Category实现原理&quot;&gt;&lt;a href=&quot;#Category实现原理&quot; class=&quot;headerlink&quot; title=&quot;Category实现原理&quot;&gt;&lt;/a&gt;Category实现原理&lt;/h2&gt;&lt;h3 id=&quot;category的结构&quot;&gt;&lt;a href=&quot;#ca
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>clang常用命令</title>
    <link href="https://blog.devzou.com/2018/08/04/ios/2018-08-12/"/>
    <id>https://blog.devzou.com/2018/08/04/ios/2018-08-12/</id>
    <published>2018-08-03T23:10:09.000Z</published>
    <updated>2018-08-13T01:04:06.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将OC代码转化为C-C-代码"><a href="#将OC代码转化为C-C-代码" class="headerlink" title="将OC代码转化为C/C++代码"></a>将OC代码转化为C/C++代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -rewrite-objc xxxx.m -o xxxx.cpp</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc OC源文件 -o 输出的cpp文件</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;将OC代码转化为C-C-代码&quot;&gt;&lt;a href=&quot;#将OC代码转化为C-C-代码&quot; class=&quot;headerlink&quot; title=&quot;将OC代码转化为C/C++代码&quot;&gt;&lt;/a&gt;将OC代码转化为C/C++代码&lt;/h2&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式之建造者模式</title>
    <link href="https://blog.devzou.com/2018/07/31/ios/2018-07-31-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.devzou.com/2018/07/31/ios/2018-07-31-设计模式之建造者模式/</id>
    <published>2018-07-30T23:10:09.000Z</published>
    <updated>2018-08-06T13:11:28.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件。而对于大多数用户而言，无须知道这些部件的装配细节，也几乎不会使用单独某个部件，而是使用一辆完整的汽车，可以通过建造者模式对其进行设计与描述，建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</p><p>在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。</p><p>复杂对象相当于一辆有待建造的汽车，而对象的属性相当于汽车的部件，建造产品的过程就相当于组合部件的过程。由于组合部件的过程很复杂，因此，这些部件的组合过程往往被“外部化”到一个称作建造者的对象里，建造者返还给客户端的是一个已经建造完毕的完整产品对象，而用户无须关心该对象所包含的属性以及它们的组装方式，这就是建造者模式的模式动机。</p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式属于对象创建型模式。根据中文翻译的不同，建造者模式又可以称为生成器模式。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>建造者模式包含如下角色：</p><ul><li>Builder：抽象建造者</li><li>ConcreteBuilder：具体建造者</li><li>Director：指挥者</li><li>Product：产品角色<h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2>抽象建造者类中定义了产品的创建方法和返回方法;</li></ul><p>建造者模式的结构中还引入了一个指挥者类Director，该类的作用主要有两个：一方面它隔离了客户与生产过程；另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象</p><p>在客户端代码中，无须关心产品对象的具体组装过程，只需确定具体建造者的类型即可，建造者模式将复杂对象的构建与对象的表现分离开来，这样使得同样的构建过程可以创建出不同的表现。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>在建造者模式中， 客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</p><ul><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， 用户使用不同的具体建造者即可得到不同的产品对象 。</li><li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li><p>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。<br>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</p><h2 id="适用环境"><a href="#适用环境" class="headerlink" title="适用环境"></a>适用环境</h2><p>在以下情况下可以使用建造者模式：</p></li><li><p>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</p></li><li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</li><li>对象的创建过程独立于创建该对象的类。在建造者模式中引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类中。</li><li><p>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</p><h2 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h2><p>建造者模式的简化:</p></li><li><p>省略抽象建造者角色：如果系统中只需要一个具体建造者的话，可以省略掉抽象建造者。</p></li><li>省略指挥者角色：在具体建造者只有一个的情况下，如果抽象建造者角色已经被省略掉，那么还可以省略指挥者角色，让</li><li>Builder角色扮演指挥者与建造者双重角色。</li></ul><p>建造者模式与抽象工厂模式的比较:</p><ul><li>与抽象工厂模式相比， 建造者模式返回一个组装好的完整产品 ，而 抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族。</li><li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象。</li><li>如果将抽象工厂模式看成 汽车配件生产工厂 ，生产一个产品族的产品，那么建造者模式就是一个 汽车组装工厂 ，通过对部件的组装可以返回一辆完整的汽车。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h2&gt;&lt;p&gt;无论是在现实世界中还是在软件系统中，都存在一些复杂的对象，它们拥有多个组成部分，如汽车，它包括车轮、方向盘、发送机等各种部件
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS底层原理之OC对象本质</title>
    <link href="https://blog.devzou.com/2018/07/31/ios/2018-08-12-iOS%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%B9%8BOC%E5%AF%B9%E8%B1%A1%E6%9C%AC%E8%B4%A8/"/>
    <id>https://blog.devzou.com/2018/07/31/ios/2018-08-12-iOS底层原理之OC对象本质/</id>
    <published>2018-07-30T23:10:09.000Z</published>
    <updated>2018-08-13T00:01:03.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Objective-C的本质"><a href="#Objective-C的本质" class="headerlink" title="Objective-C的本质"></a>Objective-C的本质</h2><p>我们平时编写的Object-C代码，底层都是C/C++代码，所以Objective-C的面向对象都是基于C/C++的数据结构实现的<br>【注】Objective-C的对象、类主要是基于C/C++的结构体实现的</p><h3 id="NSObject的底层实现"><a href="#NSObject的底层实现" class="headerlink" title="NSObject的底层实现"></a>NSObject的底层实现</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span>  <span class="title">NSObjec</span> </span>&#123;</div><div class="line">  Class isa;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>C语言实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">struct NSObject_IMPL &#123;</div><div class="line">Class isa;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="OC对象的本质"><a href="#OC对象的本质" class="headerlink" title="OC对象的本质"></a>OC对象的本质</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Objective-C的本质&quot;&gt;&lt;a href=&quot;#Objective-C的本质&quot; class=&quot;headerlink&quot; title=&quot;Objective-C的本质&quot;&gt;&lt;/a&gt;Objective-C的本质&lt;/h2&gt;&lt;p&gt;我们平时编写的Object-C代码，底层都是
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式之简单工厂模式</title>
    <link href="https://blog.devzou.com/2018/07/30/ios/2018-07-22-iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.devzou.com/2018/07/30/ios/2018-07-22-iOS设计模式之工厂模式/</id>
    <published>2018-07-29T23:10:09.000Z</published>
    <updated>2018-08-06T13:11:56.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>考虑一个简单的软件应用场景，一个软件系统可以提供多个外观不同的按钮（如圆形按钮、矩形按钮、菱形按钮等）， 这些按钮都源自同一个基类，不过在继承基类后不同的子类修改了部分属性从而使得它们可以呈现不同的外观，如果我们希望在使用这些按钮时，不需要知道这些具体按钮类的名字，只需要知道表示该按钮类的一个参数，并提供一个调用方便的方法，把该参数传入方法即可返回一个相应的按钮对象，此时，就可以使用简单工厂模式。</p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>简单工厂模式包含如下角色：<br><strong>Factory：工厂角色</strong><br>    工厂角色负责实现创建所有实例的内部逻辑<br><strong>Product：抽象产品角色</strong><br>    抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口<br><strong>ConcreteProduct：具体产品角色</strong><br>    具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。<br><img src="" alt=""></p><h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><ul><li>将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。</li><li>在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的参数保存在XML等格式的配置文件中，修改参数时无须修改任何源代码。</li><li>简单工厂模式最大的问题在于工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。</li><li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h2&gt;&lt;p&gt;考虑一个简单的软件应用场景，一个软件系统可以提供多个外观不同的按钮（如圆形按钮、矩形按钮、菱形按钮等）， 这些按钮都源自同一
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>webStorm开发微信小程序环境配置</title>
    <link href="https://blog.devzou.com/2018/04/13/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/2018-04-14-webStorm%E5%BC%80%E5%8F%91%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.devzou.com/2018/04/13/微信小程序/2018-04-14-webStorm开发微信小程序环境配置/</id>
    <published>2018-04-13T13:08:35.000Z</published>
    <updated>2018-08-07T01:36:36.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="让webStorm支持微信小程序开发"><a href="#让webStorm支持微信小程序开发" class="headerlink" title="让webStorm支持微信小程序开发"></a>让webStorm支持微信小程序开发</h2><a id="more"></a><h3 id="1-在WebStorm-gt-preference-gt-Editor-gt-FileType-gt-Cascading-Style-Sheet-添加-wxss"><a href="#1-在WebStorm-gt-preference-gt-Editor-gt-FileType-gt-Cascading-Style-Sheet-添加-wxss" class="headerlink" title="1.在WebStorm-&gt; preference-&gt;Editor-&gt; FileType-&gt;Cascading Style Sheet 添加*.wxss"></a>1.在WebStorm-&gt; preference-&gt;Editor-&gt; FileType-&gt;Cascading Style Sheet 添加*.wxss</h3><p><img src="http://okjl482qy.bkt.clouddn.com/xiaochengxu_1_01.png" alt=""><br><img src="http://okjl482qy.bkt.clouddn.com/xiaochengxu_1_02.png" alt=""></p><h3 id="2-在FileType下HTML-添加-wxml"><a href="#2-在FileType下HTML-添加-wxml" class="headerlink" title="2.在FileType下HTML 添加*.wxml"></a>2.在FileType下HTML 添加*.wxml</h3><p><img src="http://okjl482qy.bkt.clouddn.com/xiaochengxu_1_03.png" alt=""></p><h2 id="webStorm支持代码代码提醒"><a href="#webStorm支持代码代码提醒" class="headerlink" title="webStorm支持代码代码提醒"></a>webStorm支持代码代码提醒</h2><h3 id="1-下载wecharCode-jar"><a href="#1-下载wecharCode-jar" class="headerlink" title="1.下载wecharCode.jar"></a>1.下载<a href="https://link.jianshu.com/?t=https://github.com/miaozhang9/wecharCodejar" target="_blank" rel="external">wecharCode.jar</a></h3><h3 id="2-并放入-Users-你的用户名-Library-Preferences-WebStorm2016-2文件夹下"><a href="#2-并放入-Users-你的用户名-Library-Preferences-WebStorm2016-2文件夹下" class="headerlink" title="2.并放入/Users/你的用户名/Library/Preferences/WebStorm2016.2文件夹下"></a>2.并放入/Users/你的用户名/Library/Preferences/WebStorm2016.2文件夹下</h3><h3 id="3-然后在webStorm-的-File-gt-import-settings-中导入即可"><a href="#3-然后在webStorm-的-File-gt-import-settings-中导入即可" class="headerlink" title="3.然后在webStorm 的 File -&gt; import settings 中导入即可"></a>3.然后在webStorm 的 File -&gt; import settings 中导入即可</h3><p><img src="http://okjl482qy.bkt.clouddn.com/xiaochengxu_1_04.png" alt=""><br>效果如下图所示<br><img src="http://okjl482qy.bkt.clouddn.com/xiaochengxu_1_05.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      webStorm是一款强大的开发工具，我们稍加配置一下即可支持对微信小程序的开发，并且支持代码提醒功能。
    
    </summary>
    
      <category term="微信小程序" scheme="https://blog.devzou.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="https://blog.devzou.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>webpack4入门教程</title>
    <link href="https://blog.devzou.com/2018/04/01/web%E5%89%8D%E7%AB%AF/2018-04-01-webpack4%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://blog.devzou.com/2018/04/01/web前端/2018-04-01-webpack4入门教程/</id>
    <published>2018-04-01T09:34:38.898Z</published>
    <updated>2018-04-01T09:34:38.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpack-是什么"><a href="#Webpack-是什么" class="headerlink" title="Webpack 是什么"></a>Webpack 是什么</h2><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。<br><a id="more"></a></p><h2 id="为什要使用WebPack"><a href="#为什要使用WebPack" class="headerlink" title="为什要使用WebPack"></a>为什要使用WebPack</h2><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p><p>模块化，让我们可以把复杂的程序细化为小的文件;<br>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能装换为JavaScript文件使浏览器可以识别；<br>Scss，less等CSS预处理器…<br>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常反锁的，这就为WebPack类的工具的出现提供了需求。</p><h2 id="WebPack和Grunt以及Gulp相比有什么特性"><a href="#WebPack和Grunt以及Gulp相比有什么特性" class="headerlink" title="WebPack和Grunt以及Gulp相比有什么特性"></a>WebPack和Grunt以及Gulp相比有什么特性</h2><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack可以替代Gulp/Grunt类的工具。</p><p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，这个工具之后可以自动替你完成这些任务。<br>Grunt和Gulp的工作流程<br><img src="http://okjl482qy.bkt.clouddn.com/webpack_1_03.png" alt=""><br>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。<br><img src="http://okjl482qy.bkt.clouddn.com/webpack_1_01.png" alt=""><br>Webpack工作方式</p><p>Webpack工作方式<br>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p><p>开始使用Webpack</p><p>初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。</p><h2 id="全局安装webpack及webpack-cli"><a href="#全局安装webpack及webpack-cli" class="headerlink" title="全局安装webpack及webpack-cli"></a>全局安装webpack及webpack-cli</h2><p>安装webpack</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack</div></pre></td></tr></table></figure><p>安装webpack-cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack-cli</div></pre></td></tr></table></figure><h2 id="开始使用webpack"><a href="#开始使用webpack" class="headerlink" title="开始使用webpack"></a>开始使用webpack</h2><p>在桌面新建一个文件夹用于存放工程文件,文件夹名称为mywebpack。</p><p>在mywebpack文件夹中创建一个package.json文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init -y</div></pre></td></tr></table></figure><p>在mywebpack文件夹下创建index.html文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>在mywebpack文件夹创建src文件夹,在src文件夹下创建index.js,代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">"hello webpack"</span>);</div></pre></td></tr></table></figure></p><p>使用webpack进行打包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --mode development</div></pre></td></tr></table></figure></p><p>执行后结果如下<br><img src="http://okjl482qy.bkt.clouddn.com/webpack_1_04.png" alt=""><br>【重要】webpack4.x的打包已经不能用webpack 文件a 文件b的方式，而是直接运行webpack –mode development或者webpack –mode production，这样便会默认进行打包，入口文件是’./src/index.js’，输出路径是’./dist/main.js’，其中src目录即index.js文件需要手动创建，而dist目录及main.js会自动生成。</p><p>因此我们不再按webpack 文件a 文件b的方式运行webpack指令，而是直接运行</p><p>　　webpack –mode development<br>或<br>　　webpack –mode production</p><p>这样便能够实现将’./src/index.js’打包成’./dist/main.js’。</p><p>不过每次都要输入这个命令，非常麻烦，我们在package.json中scripts中加入两个成员：</p><p>　　“dev”:”webpack –mode development”,</p><p>　　“build”:”webpack –mode production”</p><p>执行webpack –mode development<br>执行npm run dev，相当于执行webpack –mode development</p><p>执行完毕后打开index.html效果如下<br><img src="http://okjl482qy.bkt.clouddn.com/webpack_1_02.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。
    
    </summary>
    
      <category term="web前端" scheme="https://blog.devzou.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="https://blog.devzou.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap常用资源</title>
    <link href="https://blog.devzou.com/2018/03/23/web%E5%89%8D%E7%AB%AF/2013-04-23-general-bootstrap-resources/"/>
    <id>https://blog.devzou.com/2018/03/23/web前端/2013-04-23-general-bootstrap-resources/</id>
    <published>2018-03-23T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方资源"><a href="#官方资源" class="headerlink" title="官方资源"></a>官方资源</h3><ul><li><a href="http://twitter.github.io/bootstrap/" target="_blank" rel="external">官方首页</a></li></ul><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><ul><li><p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="external">Font Awesome</a></p><p>扩展bootstrap的图标，是基于css的，非常漂亮，而且还支持视网膜屏，但是貌似手机上没法支持（测试过UC）</p></li></ul><h3 id="下拉按钮"><a href="#下拉按钮" class="headerlink" title="下拉按钮"></a>下拉按钮</h3><ul><li><p><a href="http://davidstutz.github.io/bootstrap-multiselect/" target="_blank" rel="external">Bootstrap Mutiselect</a></p><p>多选下拉列表插件</p></li></ul><h3 id="表单扩展"><a href="#表单扩展" class="headerlink" title="表单扩展"></a>表单扩展</h3><ul><li><p><a href="http://vincentlamanna.com/BootstrapFormHelpers/index.html" target="_blank" rel="external">Bootstrap Form Helpers</a></p><p>扩展常用的表单功能，包括日期选择、时间选择等</p></li></ul>]]></content>
    
    <summary type="html">
    
      列举自己搜集的Bootstrap资源，给像我这样前端不太行的WEB开发者
    
    </summary>
    
      <category term="资源" scheme="https://blog.devzou.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Bootstrap" scheme="https://blog.devzou.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>JS中防止浏览器屏蔽window.open</title>
    <link href="https://blog.devzou.com/2018/02/25/web%E5%89%8D%E7%AB%AF/2018-02-25-open-widown-in-javascript/"/>
    <id>https://blog.devzou.com/2018/02/25/web前端/2018-02-25-open-widown-in-javascript/</id>
    <published>2018-02-25T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.152Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候我们需要一些弹出窗来作为临时信息显示，在js代码中直接使用</p><pre><code>window.open(url,“_blank”,option);</code></pre><p>即可实现跳转，而且还可以传递一些参数。</p><p>但是有个问题是，很多浏览器不支持代码触发上述代码，这个问题在平常使用中显得很不方便，尤其是我们经常用ajax返回值来触发一个新页面。</p><p>为了防止被屏蔽，可以有两种方式解决。<br>1、在用户点击事件中增加监听程序</p><pre><code>&lt;button onclick=“test()”&gt;点击&lt;/button&gt;&lt;script type=“text/javascript”&gt;var is_finished=false;function test(){$.get(“/”,function(){is_finished=true;});test2();}function test2(){if(is_finished){window.open(“http://www.baidu.com”,“_blank”);}else{setTimeout(test2,1000);}}&lt;/script&gt;</code></pre><p>2、在点击后先打开空白页，之后再修改地址</p><pre><code>&lt;button onclick=“test()”&gt;点击&lt;/button&gt;&lt;script type=“text/javascript”&gt;function test(){var frame=window.open(“about:blank”,“_blank”);$.get(“/”,function(){frame.location=“http://www.baidu.com”;});}&lt;/script&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      JS中防止浏览器屏蔽window.open
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.devzou.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.devzou.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML 常用资源</title>
    <link href="https://blog.devzou.com/2018/02/23/web%E5%89%8D%E7%AB%AF/2018-02-23-general-html-resources/"/>
    <id>https://blog.devzou.com/2018/02/23/web前端/2018-02-23-general-html-resources/</id>
    <published>2018-02-23T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><h3 id="在link中可能会出现media-screen的情况"><a href="#在link中可能会出现media-screen的情况" class="headerlink" title="在link中可能会出现media=screen的情况"></a>在link中可能会出现media=screen的情况</h3><p>这个属性是确定在哪种情况下使用这个link的css文件，screen是指输出到屏幕，而print用于打印</p><h3 id="在meta中增加viewport选项"><a href="#在meta中增加viewport选项" class="headerlink" title="在meta中增加viewport选项"></a>在meta中增加viewport选项</h3><p>viewport的作用是告诉浏览器，目前的装置情况。</p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width;initial-scale=1.0&quot;&gt;</code></pre><ul><li>width:数字或device-width   设置宽度</li><li>height:数字或device-width    设置高度</li><li>initial-scale:最小0.25，最大5   初始缩放</li><li>minimum-scale:最小0.25，最大5   最小缩放</li><li>maximum-scale:最小0.25，最大5   最大缩放</li><li>user-scalable:1或0(yes or no)  是否允许用户缩放</li></ul>]]></content>
    
    <summary type="html">
    
      HTML 常用资源
    
    </summary>
    
      <category term="资源" scheme="https://blog.devzou.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="HTML" scheme="https://blog.devzou.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Failed to create a Maven project:&#39;/Users/one/Desktop/lesson/pom.xml&#39; already exists in VFS 解决方案</title>
    <link href="https://blog.devzou.com/2017/11/24/Java/2017-11-24-IDEA%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.devzou.com/2017/11/24/Java/2017-11-24-IDEA创建工程时遇到的问题/</id>
    <published>2017-11-24T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.091Z</updated>
    
    <content type="html"><![CDATA[<p>第一次使用IDEA创建maven项目时会报如下错误<br><img src="http://okjl482qy.bkt.clouddn.com/idea_2_01.png" alt=""><br>原因是我们在同一个目录中创建了Project Name相同的项目导致的。因为在同一目录下不能创建两个Project Name相同的Project。<br>尽管我们直接把原先的那个Project删除后，再想创建一个Project Name一样的，但是还是会出现该问题。原因那个Project其实还是在我们的电脑上，即VFS虚拟文件系统，我们可以在Mac的废纸篓中找到刚才删除的Project。最终的解决办法就是清空废纸篓或者删除在废纸篓中的原Project。这样以后，我们就可以在同一个目录中创建相同名字的Project了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次使用IDEA创建maven项目时会报如下错误&lt;br&gt;&lt;img src=&quot;http://okjl482qy.bkt.clouddn.com/idea_2_01.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;原因是我们在同一个目录中创建了Project Name相同的项目导致的。因为在
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.devzou.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.devzou.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>spring MVC 入门</title>
    <link href="https://blog.devzou.com/2017/11/20/Java/2017-11-20-spring%20MVC%E5%85%A5%E9%97%A8/"/>
    <id>https://blog.devzou.com/2017/11/20/Java/2017-11-20-spring MVC入门/</id>
    <published>2017-11-20T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.091Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架.<br><a id="more"></a></p><h2 id="Spring-MVC请求处理的整体流程如图："><a href="#Spring-MVC请求处理的整体流程如图：" class="headerlink" title="Spring MVC请求处理的整体流程如图："></a>Spring MVC请求处理的整体流程如图：</h2><p><img src="http://okjl482qy.bkt.clouddn.com/springMVC_1_01.png" alt=""></p><h2 id="创建一个hello-world程序"><a href="#创建一个hello-world程序" class="headerlink" title="创建一个hello world程序"></a>创建一个hello world程序</h2><p>打开idea应用，点击create new project<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_01.png" alt=""><br>进入如图界面，首先选择左边栏Maven，再配置JDK(如果之前添加了JDK的话会自动填充，如未添加点击旁边的New将JDK目录导入即可)。勾选”Create from archetype”，然后选中maven-archetype-webapp，点Next，进入如下界面：<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_02.png" alt=""><br>这里需要填写GroupId和ArtifactId,Version默认即可，这三个属性可以唯一标识你的项目。<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_03.png" alt=""><br>我自己的maven配置<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_04.png" alt=""><br>填写项目名，选择项目保存路径，点击Finish：<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_05.png" alt=""><br>maven会在后台生成web项目，这需要等待一定的时间，视网络环境而定.<br>下图展示了该项目的文件结构。可以发现，它在src/main下创建了一个recources文件夹，该文件夹一般用来存放一些资源文件，还有一个webapp文件夹，用来存放web配置文件以及jsp页面等，这已经组成了一个原始的web应用。选择右边红框的Enable-Auto- Import，可以在每次修改pom.xml后，自动的下载并导入jar包。<br>我们可以看到，目录结构并不是严格的maven格式,因为少了java源码文件夹<br>首先在main文件夹下创建一个文件夹，名称为Java,然后将Java文件夹标识为Source Root<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_06.png" alt=""></p><h2 id="Maven自动导入jar包"><a href="#Maven自动导入jar包" class="headerlink" title="Maven自动导入jar包"></a>Maven自动导入jar包</h2><p>既然我们要用Spring MVC开发，那肯定少不了Spring MVC的相关jar包。如果不使用Maven的话，那就需要去官网下载相关的jar包，然后导入到项目中。现在使用maven的话，就不需要上网找jar包了。<br>Maven所做的工作其实很简单，就是自动把你需要的jar包下载到本地，然后关联到项目中来。maven的所有jar包都是保存在几个中央仓库里面的，其中一个最常用的是Maven Repository，即，你需要什么jar包，它就会从仓库中拿给你。那么如何告诉maven需要什么jar包呢？我们看看工程目录，能找到一个pom.xml文件 ，maven就是靠它来定义需求的，代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>helloworld Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="SpringMVC框架配置"><a href="#SpringMVC框架配置" class="headerlink" title="SpringMVC框架配置"></a>SpringMVC框架配置</h2><p>进行完上面的配置，那就说明现在基本的开发环境已经搭建好了，现在要开始进行Spring MVC的网站开发。<br>1、web.xml配置<br>打开src\main\webapp\WEB-INF\下的web.xml文件,修改约束文件，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></div><div class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></div><div class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p><p>2.dispatcher-servlet.xml配置<br>在配置完web.xml后，需在WEB-INF目录下新建 dispatcher-servlet.xml（[servlet-name]-servlet.xml是固定规则，前面是在servlet里面定义的servlet名）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"</span></span></div><div class="line"><span class="tag">&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 标签是告诉Spring 来扫描指定包下的类，并注册被@Component，@Controller，@Service，@Repository等注解标记的组件。--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zou.controller"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- mvc view 对应文件的前缀与后缀  action 返回值 为  "index"  =&gt; "/index.jsp"  --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- @ResponseBody 返回 json 格式数据 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageAdapter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- Support JSON --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionMessageAdapter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- Support JSON --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><pre><code>MVC框架有model、view、controller三部分组成。model一般为一些基本的Java Bean，view用于进行相应的页面显示，controller用于处理网站的请求。</code></pre><p>在src\java中新建一个用于保存controller的package：在controller包中新建java类testpage（名称并不固定，可任意取），并修改如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zou.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testPage</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/helloworld"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello world dddddd"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/body/&#123;x&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> bodytest <span class="title">getBody</span><span class="params">(@PathVariable(<span class="string">"x"</span>)</span> String x)</span>&#123;</div><div class="line">        System.out.println(<span class="string">"URI Part 1 : "</span> + x);</div><div class="line">        bodytest bt = <span class="keyword">new</span> bodytest();</div><div class="line">        bt.a = x;</div><div class="line">        bt.b = <span class="string">"123"</span>;</div><div class="line">        bt.c = <span class="string">"dfdfdk"</span>;</div><div class="line">        <span class="keyword">return</span> bt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">bodytest</span></span></div><div class="line"><span class="class">    </span>&#123;</div><div class="line">        <span class="keyword">public</span>  String a;</div><div class="line">        <span class="keyword">public</span> String b;</div><div class="line">        <span class="keyword">public</span>  String c;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">    *</span></div><div class="line"><span class="comment">    @RequestMapping(value = "/user/&#123;userId&#125;/roles/&#123;roleId&#125;", method = RequestMethod.GET)</span></div><div class="line"><span class="comment">    public String getLogin(@PathVariable("userId") String userId,</span></div><div class="line"><span class="comment">                           @PathVariable("roleId") String roleId) &#123;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        System.out.println("User Id : " + userId);</span></div><div class="line"><span class="comment">        System.out.println("Role Id : " + roleId);</span></div><div class="line"><span class="comment">        return "success";</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">    @RequestMapping(value="/product/&#123;productId&#125;",method = RequestMethod.GET)</span></div><div class="line"><span class="comment">    public String getProduct(@PathVariable("productId") String productId)&#123;</span></div><div class="line"><span class="comment">        System.out.println("Product Id : " + productId);</span></div><div class="line"><span class="comment">        return "success";</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">    * */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>–@Controller注解：采用注解的方式，可以明确地定义该类为处理请求的Controller类；<br>–@RequestMapping()注解：用于定义一个请求映射，value为请求的url，值为 /helloworld 说明，该请求首页请求，method用以指定该请求类型，一般为get和post；<br>–return “success”：处理完该请求后返回的页面，此请求返回 success.jsp页面。<br>success.jsp:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;%--</div><div class="line">  Created by IntelliJ IDEA.</div><div class="line">  User: one</div><div class="line">  Date: <span class="number">2017</span>/<span class="number">11</span>/<span class="number">25</span></div><div class="line">  Time: 上午<span class="number">10</span>:<span class="number">14</span></div><div class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</div><div class="line">--%&gt;</div><div class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;我的第一个maven工程&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;我的第一个maven工程&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><h2 id="需要配置Tomcat来运行该项目。"><a href="#需要配置Tomcat来运行该项目。" class="headerlink" title="需要配置Tomcat来运行该项目。"></a>需要配置Tomcat来运行该项目。</h2><p>Run-&gt;Edit Configurations<br>点击左上角的”+”号，选择Tomcat Server，再选择Local：<br>点击 Application server 右边的 Configure，导入Tomcat 目录：<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_07.png" alt=""><br>在配置好Tomcat的路径后，如下图所示，发现依然存在警告，且左方的Tomcat8图标上有一个警告标记，说明还没有配置完全：<br>我们还需要将项目部署到 Tomcat 服务器中。点击 Deployment，再点击右边的”+”号，添加一个Artifact.<br>选择第二个：war exploded，点击OK，这样，该项目就已经部署到了tomcat中.<br>再点击OK，整个Tomcat配置结束.<br>启动 Tomcat 了，其控制台输出将在IDEA下方显示<br>启动后，浏览器将自动弹出项目首页.<br>输入<a href="http://localhost:8080/helloworld" target="_blank" rel="external">http://localhost:8080/helloworld</a><br>输出:<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_08.png" alt=""><br><a href="http://localhost:8080/body/4543" target="_blank" rel="external">http://localhost:8080/body/4543</a><br>输出<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_09.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blog.devzou.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.devzou.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>指针</title>
    <link href="https://blog.devzou.com/2017/11/03/c%E8%AF%AD%E8%A8%80/2017-11-03-%E6%8C%87%E9%92%88/"/>
    <id>https://blog.devzou.com/2017/11/03/c语言/2017-11-03-指针/</id>
    <published>2017-11-03T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.097Z</updated>
    
    <content type="html"><![CDATA[<p>指针是Ｃ语言中广泛使用的一种数据类型。指针是C语言的精华，利用指针变量可以表示各种数据结构； 能很方便地使用数组和字符串； 并能象汇编语言一样处理内存地址，从而编出精练而高效的程序。同时， 指针也是Ｃ语言中最为困难的一部分，在学习中除了要正确理解基本概念，还必须要多编程，上机调试。只要作到这些，指针也是不难掌握的。<br><a id="more"></a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念　"></a>概念　</h2><p>　　 指针变量的值是一个地址， 那么这个地址不仅可以是变量的地址， 也可以是其它数据结构的地址。在一个指针变量中存放一个数组或一个函数的首地址有何意义呢？ 因为数组或函数都是连续存放的。通过访问指针变量取得了数组或函数的首地址， 也就找到了该数组或函数。这样一来， 凡是出现数组，函数的地方都可以用一个指针变量来表示， 只要该指针变量中赋予数组或函数的首地址即可。这样做， 将会使程序的概念十分清楚，程序本身也精练，高效。在Ｃ语言中， 一种数据类型或数据结构往往都占有一组连续的内存单元。 用“地址”这个概念并不能很好地描述一种数据类型或数据结构， 而“指针”虽然实际上也是一个地址，但它却是一个数据结构的首地址， 它是“指向”一个数据结构的，因而概念更为清楚，表示更为明确。 这也是引入“指针”概念的一个重要原因。</p><h2 id="从实际出发"><a href="#从实际出发" class="headerlink" title="从实际出发"></a>从实际出发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">int p; //p是一个普通的整型变量  </div><div class="line">int *p; //首先从P 处开始,先与*结合,所以说明P 是一个指针,然后再与int 结合,说明指针所指向的内容的类型为int 型.所以P是一个返回整型数据的指针  </div><div class="line">int p[3]; //首先从P 处开始,先与[]结合,说明P 是一个数组,然后与int 结合,说明数组里的元素是整型的,所以P 是一个由整型数据组成的数组  </div><div class="line">int *p[3]; //首先从P 处开始,先与[]结合,因为其优先级比*高,所以P 是一个数组,然后再与*结合,说明数组里的元素是指针类型,然后再与int 结合,说明指针所指向的内容的类型是整型的,所以P 是一个由返回整型数据的指针所组成的数组  </div><div class="line">int (*p)[3]; //首先从P 处开始,先与*结合,说明P 是一个指针然后再与[]结合(与&quot;()&quot;这步可以忽略,只是为了改变优先级),说明指针所指向的内容是一个数组,然后再与int 结合,说明数组里的元素是整型的.所以P 是一个指向由整型数据组成的数组的指针  </div><div class="line">int **p; //首先从P 开始,先与*结合,说是P 是一个指针,然后再与*结合,说明指针所指向的元素是指针,然后再与int 结合,说明该指针所指向的元素是整型数据.由于二级指针以及更高级的指针极少用在复杂的类型中,所以后面更复杂的类型我们就不考虑多级指针了,最多只考虑一级指针.  </div><div class="line">int p(int); //从P 处起,先与()结合,说明P 是一个函数,然后进入()里分析,说明该函数有一个整型变量的参数,然后再与外面的int 结合,说明函数的返回值是一个整型数据  </div><div class="line">Int (*p)(int); //从P 处开始,先与指针结合,说明P 是一个指针,然后与()结合,说明指针指向的是一个函数,然后再与()里的int 结合,说明函数有一个int 型的参数,再与最外层的int 结合,说明函数的返回类型是整型,所以P 是一个指向有一个整型参数且返回类型为整型的函数的指针  </div><div class="line">int *(*p(int))[3]; //可以先跳过,不看这个类型,过于复杂从P 开始,先与()结合,说明P 是一个函数,然后进入()里面,与int 结合,说明函数有一个整型变量参数,然后再与外面的*结合,说明函数返回的是一个指针,,然后到最外面一层,先与[]结合,说明返回的指针指向的是一个数组,然后再与*结合,说明数组里的元素是指针,然后再与int 结合,说明指针指向的内容是整型数据.所以P 是一个参数为一个整数据且返回一个指向由整型指针变量组成的数组的指针变量的函数.</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;指针是Ｃ语言中广泛使用的一种数据类型。指针是C语言的精华，利用指针变量可以表示各种数据结构； 能很方便地使用数组和字符串； 并能象汇编语言一样处理内存地址，从而编出精练而高效的程序。同时， 指针也是Ｃ语言中最为困难的一部分，在学习中除了要正确理解基本概念，还必须要多编程，上机调试。只要作到这些，指针也是不难掌握的。&lt;br&gt;
    
    </summary>
    
      <category term="C语言" scheme="https://blog.devzou.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://blog.devzou.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>define与typedef用法总结</title>
    <link href="https://blog.devzou.com/2017/11/02/c%E8%AF%AD%E8%A8%80/2017-11-02-define%E4%B8%8Etypedef%20%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.devzou.com/2017/11/02/c语言/2017-11-02-define与typedef 用法总结/</id>
    <published>2017-11-02T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="define的用法"><a href="#define的用法" class="headerlink" title="define的用法"></a>define的用法</h2><p> #define为一宏定义语句，通常用它来定义常量(包括无参量与带参量)，以及用来实现那些“表面似和善、背后一长串”的宏，它本身并不在编 译过程中进行，而是在这之前(预处理过程)就已经完成了，但也因此难以发现潜在的错误及其它代码维护问题，它的实例像：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#define INT int</div><div class="line">#define TRUE 1 #define Add(a,b) ((a)+(b)); </div><div class="line">#define Loop_10 for (int i=0; i&lt;10; i++)</div></pre></td></tr></table></figure></p><h2 id="typedef的用法"><a href="#typedef的用法" class="headerlink" title="typedef的用法"></a>typedef的用法</h2><p> 在C/C++语言中，typedef常用来定义一个标识符及关键字的别名，它是语言编译过程的一部分，但它并不实际分配内存空间，实例像： typedef unsigned char UCHAR; typedef可以增强程序的可读性，以及标识符的灵活性，但它也有“非直观性”等缺点。</p><h2 id="define-与typedef的区别"><a href="#define-与typedef的区别" class="headerlink" title="define 与typedef的区别"></a>define 与typedef的区别</h2><ul><li>typedef给出的符号名称仅限于对类型，而不是对值</li><li>typedef的解释由编译器，而不是预处理器执行</li><li>虽然typedef的范围有限，但在其受限范围内,typedef比#define更灵活</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;define的用法&quot;&gt;&lt;a href=&quot;#define的用法&quot; class=&quot;headerlink&quot; title=&quot;define的用法&quot;&gt;&lt;/a&gt;define的用法&lt;/h2&gt;&lt;p&gt; #define为一宏定义语句，通常用它来定义常量(包括无参量与带参量)，以及用来实现那些“表面似和善、背后一长串”的宏，它本身并不在编 译过程中进行，而是在这之前(预处理过程)就已经完成了，但也因此难以发现潜在的错误及其它代码维护问题，它的实例像：&lt;br&gt;
    
    </summary>
    
      <category term="C语言" scheme="https://blog.devzou.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://blog.devzou.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>iPhone X 适配</title>
    <link href="https://blog.devzou.com/2017/10/20/ios/2017-10-20-iphone%20X%E9%80%82%E9%85%8D/"/>
    <id>https://blog.devzou.com/2017/10/20/ios/2017-10-20-iphone X适配/</id>
    <published>2017-10-20T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.131Z</updated>
    
    <content type="html"><![CDATA[<p>iPhone X 问世以后，每个有app的公司都要开始适配iPhone X了，以下是iPhone X适配的点<br><a id="more"></a></p><h2 id="你不得不知道的iPhone-X屏幕参数"><a href="#你不得不知道的iPhone-X屏幕参数" class="headerlink" title="你不得不知道的iPhone X屏幕参数"></a>你不得不知道的iPhone X屏幕参数</h2><p><img src="http://okjl482qy.bkt.clouddn.com/iphone%20X_adapt_01.png" alt=""></p><p>由上图可得iPhone X  <strong>画面大小为375pt*812pt</strong><br>                   <strong>实际解析度为 1125px*2436px</strong><br>                   屏幕垂直高度相对于4.7寸屏幕(iPhone 6,6s,7,8) 增加了145pt</p><h2 id="安全区域-竖屏"><a href="#安全区域-竖屏" class="headerlink" title="安全区域 竖屏"></a>安全区域 竖屏</h2><p>页面内容不能超过安全区域（Safe Area）<br>避免将触发交互行为的按钮放在屏幕的底部，人们会在屏幕底端使用手势进入主屏幕或切换应用（底部横条是Home键）同时避免将按钮等放在屏幕的角落中，这些系统的全局操作优先于App的操作<br><img src="http://okjl482qy.bkt.clouddn.com/iphone%20X_adapt_02.png" alt=""></p><h2 id="安全区域-横屏"><a href="#安全区域-横屏" class="headerlink" title="安全区域 横屏"></a>安全区域 横屏</h2><p><img src="http://okjl482qy.bkt.clouddn.com/iphone%20X_adapt_03.png" alt=""></p><h2 id="statusBar"><a href="#statusBar" class="headerlink" title="statusBar"></a>statusBar</h2><p>statusBar高度由原来的20pt变为44pt,增加了24pt</p><h2 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h2><p>tabBar的高度由原来的49pt变为83pt,增加了34pt</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iPhone X 问世以后，每个有app的公司都要开始适配iPhone X了，以下是iPhone X适配的点&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React Native布局</title>
    <link href="https://blog.devzou.com/2017/10/16/React-Native/2017-10-16-React-Native%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.devzou.com/2017/10/16/React-Native/2017-10-16-React-Native布局详解/</id>
    <published>2017-10-16T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.092Z</updated>
    
    <content type="html"><![CDATA[<p>在React Native中布局采用的是FleBox(弹性框)进行布局。本文章将向大家介绍React Native中的布局方式FlexBox。请参考<a href="http://facebook.github.io/react-native/docs/flexbox.html" target="_blank" rel="external">FlexBox弹性布局官方文档</a><br><a id="more"></a><br>FlexBox提供了在不同尺寸设备上都能保持一致的布局方式。FlexBox是CSS3弹性框布局规范，目前还处于最终征求意见稿 (Last Call Working Draft)阶段，并不是所有的浏览器都支持Flexbox。但大家在做React Native开发时大可不必担心FlexBox的兼容性问题，因为既然React Native选择用FlexBox布局，那么React Native对FlexBox的支持自然会做的很好。</p><h2 id="Flexbox的工作方式与在网络上的CSS中的异同点"><a href="#Flexbox的工作方式与在网络上的CSS中的异同点" class="headerlink" title="Flexbox的工作方式与在网络上的CSS中的异同点"></a>Flexbox的工作方式与在网络上的CSS中的异同点</h2><ol><li>flexDirection: React Native中默认为flexDirection:’column’，在Web CSS中默认为flex-direction:’row’</li><li>alignItems: React Native中默认为alignItems:’stretch’，在Web CSS中默认align-items:’flex-start’</li><li>flex: 相比Web CSS的flex接受多参数，如:flex: 2 2 10%;，但在 React Native中flex只接受一个参数</li><li>不支持属性：align-content，flex-basis，order，flex-basis，flex-flow，flex-grow，flex-shrink<h2 id="父视图属性-容器属性-："><a href="#父视图属性-容器属性-：" class="headerlink" title="父视图属性(容器属性)："></a>父视图属性(容器属性)：</h2></li></ol><ul><li>flexDirection enum(‘row’, ‘column’,’row-reverse’,’column-reverse’)</li><li>flexWrap enum(‘wrap’, ‘nowrap’)</li><li>justifyContent enum(‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’)</li><li>alignItems enum(‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’)<h3 id="flexDirection"><a href="#flexDirection" class="headerlink" title="flexDirection"></a>flexDirection</h3>flexDirection属性定义了父视图中的子元素沿横轴或侧轴方片的排列方式。<br><code>flexDirection enum(&#39;row&#39;, &#39;column&#39;,&#39;row-reverse&#39;,&#39;column-reverse&#39;)</code><blockquote><p>row: 从左向右依次排列<br>row-reverse: 从右向左依次排列<br>column(default): 默认的排列方式，从上向下排列<br>column-reverse: 从下向上排列</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123; &#123;<span class="attr">flexDirection</span>:<span class="string">'row'</span>,<span class="attr">backgroundColor</span>:<span class="string">"red"</span>,<span class="attr">marginTop</span>:<span class="number">20</span>,<span class="attr">flexWrap</span>:<span class="string">'wrap'</span>&#125;&#125;&gt;</div><div class="line">     &lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">20</span>,<span class="attr">backgroundColor</span>:<span class="string">"darkcyan"</span>,<span class="attr">margin</span>:<span class="number">5</span>&#125;&#125;&gt;</div><div class="line">        &lt;Text style=&#123; &#123;<span class="attr">fontSize</span>:<span class="number">16</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;<span class="number">1</span>&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>View&gt;</div><div class="line">     &lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">20</span>,<span class="attr">backgroundColor</span>:<span class="string">"darkcyan"</span>,<span class="attr">margin</span>:<span class="number">5</span>&#125;&#125;&gt;</div><div class="line">       &lt;Text style=&#123; &#123;<span class="attr">fontSize</span>:<span class="number">16</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;<span class="number">2</span>&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>View&gt;</div><div class="line">     &lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">20</span>,<span class="attr">backgroundColor</span>:<span class="string">"darkcyan"</span>,<span class="attr">margin</span>:<span class="number">5</span>&#125;&#125;&gt;</div><div class="line">       &lt;Text style=&#123; &#123;<span class="attr">fontSize</span>:<span class="number">16</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;<span class="number">3</span>&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>View&gt;</div><div class="line">     &lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">20</span>,<span class="attr">backgroundColor</span>:<span class="string">"darkcyan"</span>,<span class="attr">margin</span>:<span class="number">5</span>&#125;&#125;&gt;</div><div class="line">       &lt;Text style=&#123; &#123;<span class="attr">fontSize</span>:<span class="number">16</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;<span class="number">4</span>&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>View&gt;</div><div class="line"> &lt;<span class="regexp">/View&gt;</span></div></pre></td></tr></table></figure><h3 id="flexWrap"><a href="#flexWrap" class="headerlink" title="flexWrap"></a>flexWrap</h3><p>flexWrap属性定义了子元素在父视图内是否允许多行排列，默认为nowrap。<br><code>flexWrap enum(&#39;wrap&#39;, &#39;nowrap&#39;)</code></p><blockquote><p>nowrap flex的元素只排列在一行上，可能导致溢出。<br>wrap flex的元素在一行排列不下时，就进行多行排列。</p></blockquote><h3 id="justifyContent"><a href="#justifyContent" class="headerlink" title="justifyContent"></a>justifyContent</h3><p>justifyContent属性定义了浏览器如何分配顺着父容器主轴的弹性（flex）元素之间及其周围的空间，默认为flex-start。</p><blockquote><p>flex-start(default) 从行首开始排列。每行第一个弹性元素与行首对齐，同时所有后续的弹性元素与前 一个对齐。<br>flex-end 从行尾开始排列。每行最后一个弹性元素与行尾对齐，其他元素将与后一个对齐。<br>center 伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。<br>space-between 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。<br>space-around 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。</p></blockquote><h3 id="alignItems"><a href="#alignItems" class="headerlink" title="alignItems"></a>alignItems</h3><p>alignItems属性以与justify-content相同的方式在侧轴方向上将当前行上的弹性元素对齐，默认为stretch。<br><code>alignItems enum(&#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</code></p><blockquote><p>flex-start 元素向侧轴起点对齐。<br>flex-end 元素向侧轴终点对齐。<br>center 元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。<br>stretch 弹性元素被在侧轴方向被拉伸到与容器相同的高度或宽度。</p></blockquote><h2 id="子视图属性"><a href="#子视图属性" class="headerlink" title="子视图属性"></a>子视图属性</h2><h3 id="alignSelf"><a href="#alignSelf" class="headerlink" title="alignSelf"></a>alignSelf</h3><p>alignSelf属性以属性定义了flex容器内被选中项目的对齐方式。注意：alignSelf 属性可重写灵活容器的 alignItems 属性。<br><code>alignSelf enum(&#39;auto&#39;, &#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</code></p><blockquote><p>auto(default) 元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。<br>stretch 元素被拉伸以适应容器。<br>center 元素位于容器的中心。<br>flex-start 元素位于容器的开头。<br>flex-end 元素位于容器的结尾。</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>flex 属性定义了一个可伸缩元素的能力，默认为0。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在React Native中布局采用的是FleBox(弹性框)进行布局。本文章将向大家介绍React Native中的布局方式FlexBox。请参考&lt;a href=&quot;http://facebook.github.io/react-native/docs/flexbox.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlexBox弹性布局官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="React-Native" scheme="https://blog.devzou.com/categories/React-Native/"/>
    
    
      <category term="React-Naticve" scheme="https://blog.devzou.com/tags/React-Naticve/"/>
    
  </entry>
  
  <entry>
    <title>贝塞尔曲线的基本知识</title>
    <link href="https://blog.devzou.com/2017/09/13/ios/2017-09-13-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>https://blog.devzou.com/2017/09/13/ios/2017-09-13-贝塞尔曲线的基本知识/</id>
    <published>2017-09-13T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.130Z</updated>
    
    <content type="html"><![CDATA[<p>UIBezierPath是对Core Graphics框架的一个封装，使用UIBezierPath类我们可以画出我们想要的图形<br><a id="more"></a></p><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><p>UIBezierPath对象是CGPathRef数据类型的封装。path如果是基于矢量形状的，都用直线或曲线去创建。我们一般使用UIBezierPath都是在重写view的drawRect方法这种情形。我们用直线去创建矩形或多边形，使用曲线创建弧或者圆。创建和使用path对象步骤：<br>1、 重写View的drawRect方法<br>2、 创建UIBezierPath的对象<br>3、 使用方法moveToPoint: 设置初始点<br>4、 根据具体要求使用UIBezierPath类方法绘图（比如要画线、矩形、圆、弧？等）<br>5、 设置UIBezierPath对象相关属性 （比如lineWidth、lineJoinStyle、aPath.lineCapStyle、color）<br>6、 使用stroke 或者 fill方法结束绘图</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>以下代码是我从<code>UIBezierPath.h</code>中复制出来的，下面依次讲解每一个方法及属性，毕竟我们一手资料是先查看系统库的头文件<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  UIBezierPath.h</span></div><div class="line"><span class="comment">//  UIKit</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Copyright (c) 2009-2017 Apple Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;CoreGraphics/CoreGraphics.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKitDefines.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></div><div class="line"><span class="comment">/**/</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UIRectCorner</span>) &#123;</div><div class="line">    <span class="built_in">UIRectCornerTopLeft</span>     = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</div><div class="line">    <span class="built_in">UIRectCornerTopRight</span>    = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</div><div class="line">    <span class="built_in">UIRectCornerBottomLeft</span>  = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</div><div class="line">    <span class="built_in">UIRectCornerBottomRight</span> = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</div><div class="line">    <span class="built_in">UIRectCornerAllCorners</span>  = ~<span class="number">0</span>UL</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">3</span>_2) <span class="class"><span class="keyword">@interface</span> <span class="title">UIBezierPath</span> : <span class="title">NSObject</span>&lt;<span class="title">NSCopying</span>, <span class="title">NSSecureCoding</span>&gt;</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 标准初始化方法</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPath;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 根据矩形创建贝塞尔曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithRect:(<span class="built_in">CGRect</span>)rect;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 根据矩形框的内切圆画曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithOvalInRect:(<span class="built_in">CGRect</span>)rect;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 根据矩形画带圆角的曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithRoundedRect:(<span class="built_in">CGRect</span>)rect cornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius; <span class="comment">// rounds all corners with the same horizontal and vertical radius</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 在矩形中，可以针对四角中的某个角加圆角</span></div><div class="line"><span class="comment"> @param rect   矩形</span></div><div class="line"><span class="comment"> @param corners 用来指定需要加圆角的位置，该参数为枚举值，具体枚举在UIRectCorner</span></div><div class="line"><span class="comment"> @param cornerRadii 参数用来设置圆角的大小</span></div><div class="line"><span class="comment"> @return 贝塞尔曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithRoundedRect:(<span class="built_in">CGRect</span>)rect byRoundingCorners:(<span class="built_in">UIRectCorner</span>)corners cornerRadii:(<span class="built_in">CGSize</span>)cornerRadii;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 以某个中心点画弧线</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> @param center 弧线中心点的坐标</span></div><div class="line"><span class="comment"> @param radius 弧线所在圆的半径</span></div><div class="line"><span class="comment"> @param startAngle 弧线开始的角度值</span></div><div class="line"><span class="comment"> @param endAngle 弧线结束的角度值</span></div><div class="line"><span class="comment"> @param clockwise 是否顺时针画弧线</span></div><div class="line"><span class="comment"> @return 贝塞尔曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithArcCenter:(<span class="built_in">CGPoint</span>)center radius:(<span class="built_in">CGFloat</span>)radius startAngle:(<span class="built_in">CGFloat</span>)startAngle endAngle:(<span class="built_in">CGFloat</span>)endAngle clockwise:(<span class="built_in">BOOL</span>)clockwise;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 通过path创建贝塞尔曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithCGPath:(<span class="built_in">CGPathRef</span>)<span class="built_in">CGPath</span>;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line"></div><div class="line"><span class="comment">// Returns an immutable CGPathRef which is only valid until the UIBezierPath is further mutated.</span></div><div class="line"><span class="comment">// Setting the path will create an immutable copy of the provided CGPathRef, so any further mutations on a provided CGMutablePathRef will be ignored.</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGPathRef</span> <span class="built_in">CGPath</span>;</div><div class="line">- (<span class="built_in">CGPathRef</span>)<span class="built_in">CGPath</span> <span class="built_in">NS_RETURNS_INNER_POINTER</span> <span class="built_in">CF_RETURNS_NOT_RETAINED</span>;</div><div class="line"></div><div class="line"><span class="comment">// Path construction</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 设置起始点（调用这个方法的时候，会结束上一条线的绘制）</span></div><div class="line"><span class="comment"> */</span></div><div class="line">- (<span class="keyword">void</span>)moveToPoint:(<span class="built_in">CGPoint</span>)point;</div><div class="line">- (<span class="keyword">void</span>)addLineToPoint:(<span class="built_in">CGPoint</span>)point;</div><div class="line">- (<span class="keyword">void</span>)addCurveToPoint:(<span class="built_in">CGPoint</span>)endPoint controlPoint1:(<span class="built_in">CGPoint</span>)controlPoint1 controlPoint2:(<span class="built_in">CGPoint</span>)controlPoint2;</div><div class="line">- (<span class="keyword">void</span>)addQuadCurveToPoint:(<span class="built_in">CGPoint</span>)endPoint controlPoint:(<span class="built_in">CGPoint</span>)controlPoint;</div><div class="line">- (<span class="keyword">void</span>)addArcWithCenter:(<span class="built_in">CGPoint</span>)center radius:(<span class="built_in">CGFloat</span>)radius startAngle:(<span class="built_in">CGFloat</span>)startAngle endAngle:(<span class="built_in">CGFloat</span>)endAngle clockwise:(<span class="built_in">BOOL</span>)clockwise <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">4</span>_0);</div><div class="line">- (<span class="keyword">void</span>)closePath;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)removeAllPoints;</div><div class="line"></div><div class="line"><span class="comment">// Appending paths</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)appendPath:(<span class="built_in">UIBezierPath</span> *)bezierPath;</div><div class="line"></div><div class="line"><span class="comment">// Modified paths</span></div><div class="line"></div><div class="line">- (<span class="built_in">UIBezierPath</span> *)bezierPathByReversingPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// Transforming paths</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)applyTransform:(<span class="built_in">CGAffineTransform</span>)transform;</div><div class="line"></div><div class="line"><span class="comment">// Path info</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isEmpty) <span class="built_in">BOOL</span> empty;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">CGRect</span> bounds;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">CGPoint</span> currentPoint;</div><div class="line">- (<span class="built_in">BOOL</span>)containsPoint:(<span class="built_in">CGPoint</span>)point;</div><div class="line"></div><div class="line"><span class="comment">// Drawing properties</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> lineWidth;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGLineCap</span> lineCapStyle;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGLineJoin</span> lineJoinStyle;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> miterLimit; <span class="comment">// Used when lineJoinStyle is kCGLineJoinMiter</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> flatness;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> usesEvenOddFillRule; <span class="comment">// Default is NO. When YES, the even-odd fill rule is used for drawing, clipping, and hit testing.</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setLineDash:(<span class="keyword">nullable</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> *)pattern count:(<span class="built_in">NSInteger</span>)count phase:(<span class="built_in">CGFloat</span>)phase;</div><div class="line">- (<span class="keyword">void</span>)getLineDash:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)pattern count:(<span class="keyword">nullable</span> <span class="built_in">NSInteger</span> *)count phase:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)phase;</div><div class="line"></div><div class="line"><span class="comment">// Path operations on the current graphics context</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)fill;</div><div class="line">- (<span class="keyword">void</span>)stroke;</div><div class="line"></div><div class="line"><span class="comment">// These methods do not affect the blend mode or alpha of the current graphics context</span></div><div class="line">- (<span class="keyword">void</span>)fillWithBlendMode:(<span class="built_in">CGBlendMode</span>)blendMode alpha:(<span class="built_in">CGFloat</span>)alpha;</div><div class="line">- (<span class="keyword">void</span>)strokeWithBlendMode:(<span class="built_in">CGBlendMode</span>)blendMode alpha:(<span class="built_in">CGFloat</span>)alpha;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addClip;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIBezierPath是对Core Graphics框架的一个封装，使用UIBezierPath类我们可以画出我们想要的图形&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
</feed>
