<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小玉的技术博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.devzou.com/"/>
  <updated>2018-04-01T09:34:38.898Z</updated>
  <id>https://blog.devzou.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack4入门教程</title>
    <link href="https://blog.devzou.com/2018/04/01/web%E5%89%8D%E7%AB%AF/2018-04-01-webpack4%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://blog.devzou.com/2018/04/01/web前端/2018-04-01-webpack4入门教程/</id>
    <published>2018-04-01T09:34:38.897Z</published>
    <updated>2018-04-01T09:34:38.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpack-是什么"><a href="#Webpack-是什么" class="headerlink" title="Webpack 是什么"></a>Webpack 是什么</h2><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。<br><a id="more"></a></p><h2 id="为什要使用WebPack"><a href="#为什要使用WebPack" class="headerlink" title="为什要使用WebPack"></a>为什要使用WebPack</h2><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p><p>模块化，让我们可以把复杂的程序细化为小的文件;<br>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能能装换为JavaScript文件使浏览器可以识别；<br>Scss，less等CSS预处理器…<br>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常反锁的，这就为WebPack类的工具的出现提供了需求。</p><h2 id="WebPack和Grunt以及Gulp相比有什么特性"><a href="#WebPack和Grunt以及Gulp相比有什么特性" class="headerlink" title="WebPack和Grunt以及Gulp相比有什么特性"></a>WebPack和Grunt以及Gulp相比有什么特性</h2><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack可以替代Gulp/Grunt类的工具。</p><p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，这个工具之后可以自动替你完成这些任务。<br>Grunt和Gulp的工作流程<br><img src="http://okjl482qy.bkt.clouddn.com/webpack_1_03.png" alt=""><br>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件。<br><img src="http://okjl482qy.bkt.clouddn.com/webpack_1_01.png" alt=""><br>Webpack工作方式</p><p>Webpack工作方式<br>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p><p>开始使用Webpack</p><p>初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。</p><h2 id="全局安装webpack及webpack-cli"><a href="#全局安装webpack及webpack-cli" class="headerlink" title="全局安装webpack及webpack-cli"></a>全局安装webpack及webpack-cli</h2><p>安装webpack</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack</div></pre></td></tr></table></figure><p>安装webpack-cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack-cli</div></pre></td></tr></table></figure><h2 id="开始使用webpack"><a href="#开始使用webpack" class="headerlink" title="开始使用webpack"></a>开始使用webpack</h2><p>在桌面新建一个文件夹用于存放工程文件,文件夹名称为mywebpack。</p><p>在mywebpack文件夹中创建一个package.json文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init -y</div></pre></td></tr></table></figure><p>在mywebpack文件夹下创建index.html文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>在mywebpack文件夹创建src文件夹,在src文件夹下创建index.js,代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">"hello webpack"</span>);</div></pre></td></tr></table></figure></p><p>使用webpack进行打包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --mode development</div></pre></td></tr></table></figure></p><p>执行后结果如下<br><img src="http://okjl482qy.bkt.clouddn.com/webpack_1_04.png" alt=""><br>【重要】webpack4.x的打包已经不能用webpack 文件a 文件b的方式，而是直接运行webpack –mode development或者webpack –mode production，这样便会默认进行打包，入口文件是’./src/index.js’，输出路径是’./dist/main.js’，其中src目录即index.js文件需要手动创建，而dist目录及main.js会自动生成。</p><p>因此我们不再按webpack 文件a 文件b的方式运行webpack指令，而是直接运行</p><p>　　webpack –mode development<br>或<br>　　webpack –mode production</p><p>这样便能够实现将’./src/index.js’打包成’./dist/main.js’。</p><p>不过每次都要输入这个命令，非常麻烦，我们在package.json中scripts中加入两个成员：</p><p>　　“dev”:”webpack –mode development”,</p><p>　　“build”:”webpack –mode production”</p><p>执行webpack –mode development<br>执行npm run dev，相当于执行webpack –mode development</p><p>执行完毕后打开index.html效果如下<br><img src="http://okjl482qy.bkt.clouddn.com/webpack_1_02.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。
    
    </summary>
    
      <category term="web前端" scheme="https://blog.devzou.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="https://blog.devzou.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap常用资源</title>
    <link href="https://blog.devzou.com/2018/03/23/web%E5%89%8D%E7%AB%AF/2013-04-23-general-bootstrap-resources/"/>
    <id>https://blog.devzou.com/2018/03/23/web前端/2013-04-23-general-bootstrap-resources/</id>
    <published>2018-03-23T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.150Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方资源"><a href="#官方资源" class="headerlink" title="官方资源"></a>官方资源</h3><ul><li><a href="http://twitter.github.io/bootstrap/" target="_blank" rel="external">官方首页</a></li></ul><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><ul><li><p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="external">Font Awesome</a></p><p>扩展bootstrap的图标，是基于css的，非常漂亮，而且还支持视网膜屏，但是貌似手机上没法支持（测试过UC）</p></li></ul><h3 id="下拉按钮"><a href="#下拉按钮" class="headerlink" title="下拉按钮"></a>下拉按钮</h3><ul><li><p><a href="http://davidstutz.github.io/bootstrap-multiselect/" target="_blank" rel="external">Bootstrap Mutiselect</a></p><p>多选下拉列表插件</p></li></ul><h3 id="表单扩展"><a href="#表单扩展" class="headerlink" title="表单扩展"></a>表单扩展</h3><ul><li><p><a href="http://vincentlamanna.com/BootstrapFormHelpers/index.html" target="_blank" rel="external">Bootstrap Form Helpers</a></p><p>扩展常用的表单功能，包括日期选择、时间选择等</p></li></ul>]]></content>
    
    <summary type="html">
    
      列举自己搜集的Bootstrap资源，给像我这样前端不太行的WEB开发者
    
    </summary>
    
      <category term="资源" scheme="https://blog.devzou.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Bootstrap" scheme="https://blog.devzou.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>JS中防止浏览器屏蔽window.open</title>
    <link href="https://blog.devzou.com/2018/02/25/web%E5%89%8D%E7%AB%AF/2018-02-25-open-widown-in-javascript/"/>
    <id>https://blog.devzou.com/2018/02/25/web前端/2018-02-25-open-widown-in-javascript/</id>
    <published>2018-02-25T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.152Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候我们需要一些弹出窗来作为临时信息显示，在js代码中直接使用</p><pre><code>window.open(url,“_blank”,option);</code></pre><p>即可实现跳转，而且还可以传递一些参数。</p><p>但是有个问题是，很多浏览器不支持代码触发上述代码，这个问题在平常使用中显得很不方便，尤其是我们经常用ajax返回值来触发一个新页面。</p><p>为了防止被屏蔽，可以有两种方式解决。<br>1、在用户点击事件中增加监听程序</p><pre><code>&lt;button onclick=“test()”&gt;点击&lt;/button&gt;&lt;script type=“text/javascript”&gt;var is_finished=false;function test(){$.get(“/”,function(){is_finished=true;});test2();}function test2(){if(is_finished){window.open(“http://www.baidu.com”,“_blank”);}else{setTimeout(test2,1000);}}&lt;/script&gt;</code></pre><p>2、在点击后先打开空白页，之后再修改地址</p><pre><code>&lt;button onclick=“test()”&gt;点击&lt;/button&gt;&lt;script type=“text/javascript”&gt;function test(){var frame=window.open(“about:blank”,“_blank”);$.get(“/”,function(){frame.location=“http://www.baidu.com”;});}&lt;/script&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      JS中防止浏览器屏蔽window.open
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.devzou.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://blog.devzou.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML 常用资源</title>
    <link href="https://blog.devzou.com/2018/02/23/web%E5%89%8D%E7%AB%AF/2018-02-23-general-html-resources/"/>
    <id>https://blog.devzou.com/2018/02/23/web前端/2018-02-23-general-html-resources/</id>
    <published>2018-02-23T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><h3 id="在link中可能会出现media-screen的情况"><a href="#在link中可能会出现media-screen的情况" class="headerlink" title="在link中可能会出现media=screen的情况"></a>在link中可能会出现media=screen的情况</h3><p>这个属性是确定在哪种情况下使用这个link的css文件，screen是指输出到屏幕，而print用于打印</p><h3 id="在meta中增加viewport选项"><a href="#在meta中增加viewport选项" class="headerlink" title="在meta中增加viewport选项"></a>在meta中增加viewport选项</h3><p>viewport的作用是告诉浏览器，目前的装置情况。</p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width;initial-scale=1.0&quot;&gt;</code></pre><ul><li>width:数字或device-width   设置宽度</li><li>height:数字或device-width    设置高度</li><li>initial-scale:最小0.25，最大5   初始缩放</li><li>minimum-scale:最小0.25，最大5   最小缩放</li><li>maximum-scale:最小0.25，最大5   最大缩放</li><li>user-scalable:1或0(yes or no)  是否允许用户缩放</li></ul>]]></content>
    
    <summary type="html">
    
      HTML 常用资源
    
    </summary>
    
      <category term="资源" scheme="https://blog.devzou.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="HTML" scheme="https://blog.devzou.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Failed to create a Maven project:&#39;/Users/one/Desktop/lesson/pom.xml&#39; already exists in VFS 解决方案</title>
    <link href="https://blog.devzou.com/2017/11/24/Java/2017-11-24-IDEA%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.devzou.com/2017/11/24/Java/2017-11-24-IDEA创建工程时遇到的问题/</id>
    <published>2017-11-24T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.091Z</updated>
    
    <content type="html"><![CDATA[<p>第一次使用IDEA创建maven项目时会报如下错误<br><img src="http://okjl482qy.bkt.clouddn.com/idea_2_01.png" alt=""><br>原因是我们在同一个目录中创建了Project Name相同的项目导致的。因为在同一目录下不能创建两个Project Name相同的Project。<br>尽管我们直接把原先的那个Project删除后，再想创建一个Project Name一样的，但是还是会出现该问题。原因那个Project其实还是在我们的电脑上，即VFS虚拟文件系统，我们可以在Mac的废纸篓中找到刚才删除的Project。最终的解决办法就是清空废纸篓或者删除在废纸篓中的原Project。这样以后，我们就可以在同一个目录中创建相同名字的Project了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次使用IDEA创建maven项目时会报如下错误&lt;br&gt;&lt;img src=&quot;http://okjl482qy.bkt.clouddn.com/idea_2_01.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;原因是我们在同一个目录中创建了Project Name相同的项目导致的。因为在
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.devzou.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.devzou.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>spring MVC 入门</title>
    <link href="https://blog.devzou.com/2017/11/20/Java/2017-11-20-spring%20MVC%E5%85%A5%E9%97%A8/"/>
    <id>https://blog.devzou.com/2017/11/20/Java/2017-11-20-spring MVC入门/</id>
    <published>2017-11-20T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.090Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架.<br><a id="more"></a></p><h2 id="Spring-MVC请求处理的整体流程如图："><a href="#Spring-MVC请求处理的整体流程如图：" class="headerlink" title="Spring MVC请求处理的整体流程如图："></a>Spring MVC请求处理的整体流程如图：</h2><p><img src="http://okjl482qy.bkt.clouddn.com/springMVC_1_01.png" alt=""></p><h2 id="创建一个hello-world程序"><a href="#创建一个hello-world程序" class="headerlink" title="创建一个hello world程序"></a>创建一个hello world程序</h2><p>打开idea应用，点击create new project<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_01.png" alt=""><br>进入如图界面，首先选择左边栏Maven，再配置JDK(如果之前添加了JDK的话会自动填充，如未添加点击旁边的New将JDK目录导入即可)。勾选”Create from archetype”，然后选中maven-archetype-webapp，点Next，进入如下界面：<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_02.png" alt=""><br>这里需要填写GroupId和ArtifactId,Version默认即可，这三个属性可以唯一标识你的项目。<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_03.png" alt=""><br>我自己的maven配置<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_04.png" alt=""><br>填写项目名，选择项目保存路径，点击Finish：<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_05.png" alt=""><br>maven会在后台生成web项目，这需要等待一定的时间，视网络环境而定.<br>下图展示了该项目的文件结构。可以发现，它在src/main下创建了一个recources文件夹，该文件夹一般用来存放一些资源文件，还有一个webapp文件夹，用来存放web配置文件以及jsp页面等，这已经组成了一个原始的web应用。选择右边红框的Enable-Auto- Import，可以在每次修改pom.xml后，自动的下载并导入jar包。<br>我们可以看到，目录结构并不是严格的maven格式,因为少了java源码文件夹<br>首先在main文件夹下创建一个文件夹，名称为Java,然后将Java文件夹标识为Source Root<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_06.png" alt=""></p><h2 id="Maven自动导入jar包"><a href="#Maven自动导入jar包" class="headerlink" title="Maven自动导入jar包"></a>Maven自动导入jar包</h2><p>既然我们要用Spring MVC开发，那肯定少不了Spring MVC的相关jar包。如果不使用Maven的话，那就需要去官网下载相关的jar包，然后导入到项目中。现在使用maven的话，就不需要上网找jar包了。<br>Maven所做的工作其实很简单，就是自动把你需要的jar包下载到本地，然后关联到项目中来。maven的所有jar包都是保存在几个中央仓库里面的，其中一个最常用的是Maven Repository，即，你需要什么jar包，它就会从仓库中拿给你。那么如何告诉maven需要什么jar包呢？我们看看工程目录，能找到一个pom.xml文件 ，maven就是靠它来定义需求的，代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>helloworld Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="SpringMVC框架配置"><a href="#SpringMVC框架配置" class="headerlink" title="SpringMVC框架配置"></a>SpringMVC框架配置</h2><p>进行完上面的配置，那就说明现在基本的开发环境已经搭建好了，现在要开始进行Spring MVC的网站开发。<br>1、web.xml配置<br>打开src\main\webapp\WEB-INF\下的web.xml文件,修改约束文件，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></div><div class="line"><span class="meta"> "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></div><div class="line"><span class="meta"> "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p><p>2.dispatcher-servlet.xml配置<br>在配置完web.xml后，需在WEB-INF目录下新建 dispatcher-servlet.xml（[servlet-name]-servlet.xml是固定规则，前面是在servlet里面定义的servlet名）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"</span></span></div><div class="line"><span class="tag">&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 标签是告诉Spring 来扫描指定包下的类，并注册被@Component，@Controller，@Service，@Repository等注解标记的组件。--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zou.controller"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- mvc view 对应文件的前缀与后缀  action 返回值 为  "index"  =&gt; "/index.jsp"  --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- @ResponseBody 返回 json 格式数据 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageAdapter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- Support JSON --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionMessageAdapter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- Support JSON --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><pre><code>MVC框架有model、view、controller三部分组成。model一般为一些基本的Java Bean，view用于进行相应的页面显示，controller用于处理网站的请求。</code></pre><p>在src\java中新建一个用于保存controller的package：在controller包中新建java类testpage（名称并不固定，可任意取），并修改如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zou.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testPage</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/helloworld"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello world dddddd"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/body/&#123;x&#125;"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> bodytest <span class="title">getBody</span><span class="params">(@PathVariable(<span class="string">"x"</span>)</span> String x)</span>&#123;</div><div class="line">        System.out.println(<span class="string">"URI Part 1 : "</span> + x);</div><div class="line">        bodytest bt = <span class="keyword">new</span> bodytest();</div><div class="line">        bt.a = x;</div><div class="line">        bt.b = <span class="string">"123"</span>;</div><div class="line">        bt.c = <span class="string">"dfdfdk"</span>;</div><div class="line">        <span class="keyword">return</span> bt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">bodytest</span></span></div><div class="line"><span class="class">    </span>&#123;</div><div class="line">        <span class="keyword">public</span>  String a;</div><div class="line">        <span class="keyword">public</span> String b;</div><div class="line">        <span class="keyword">public</span>  String c;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">    *</span></div><div class="line"><span class="comment">    @RequestMapping(value = "/user/&#123;userId&#125;/roles/&#123;roleId&#125;", method = RequestMethod.GET)</span></div><div class="line"><span class="comment">    public String getLogin(@PathVariable("userId") String userId,</span></div><div class="line"><span class="comment">                           @PathVariable("roleId") String roleId) &#123;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">        System.out.println("User Id : " + userId);</span></div><div class="line"><span class="comment">        System.out.println("Role Id : " + roleId);</span></div><div class="line"><span class="comment">        return "success";</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">    @RequestMapping(value="/product/&#123;productId&#125;",method = RequestMethod.GET)</span></div><div class="line"><span class="comment">    public String getProduct(@PathVariable("productId") String productId)&#123;</span></div><div class="line"><span class="comment">        System.out.println("Product Id : " + productId);</span></div><div class="line"><span class="comment">        return "success";</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">    * */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>–@Controller注解：采用注解的方式，可以明确地定义该类为处理请求的Controller类；<br>–@RequestMapping()注解：用于定义一个请求映射，value为请求的url，值为 /helloworld 说明，该请求首页请求，method用以指定该请求类型，一般为get和post；<br>–return “success”：处理完该请求后返回的页面，此请求返回 success.jsp页面。<br>success.jsp:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;%--</div><div class="line">  Created by IntelliJ IDEA.</div><div class="line">  User: one</div><div class="line">  Date: <span class="number">2017</span>/<span class="number">11</span>/<span class="number">25</span></div><div class="line">  Time: 上午<span class="number">10</span>:<span class="number">14</span></div><div class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</div><div class="line">--%&gt;</div><div class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;我的第一个maven工程&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;我的第一个maven工程&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><h2 id="需要配置Tomcat来运行该项目。"><a href="#需要配置Tomcat来运行该项目。" class="headerlink" title="需要配置Tomcat来运行该项目。"></a>需要配置Tomcat来运行该项目。</h2><p>Run-&gt;Edit Configurations<br>点击左上角的”+”号，选择Tomcat Server，再选择Local：<br>点击 Application server 右边的 Configure，导入Tomcat 目录：<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_07.png" alt=""><br>在配置好Tomcat的路径后，如下图所示，发现依然存在警告，且左方的Tomcat8图标上有一个警告标记，说明还没有配置完全：<br>我们还需要将项目部署到 Tomcat 服务器中。点击 Deployment，再点击右边的”+”号，添加一个Artifact.<br>选择第二个：war exploded，点击OK，这样，该项目就已经部署到了tomcat中.<br>再点击OK，整个Tomcat配置结束.<br>启动 Tomcat 了，其控制台输出将在IDEA下方显示<br>启动后，浏览器将自动弹出项目首页.<br>输入<a href="http://localhost:8080/helloworld" target="_blank" rel="external">http://localhost:8080/helloworld</a><br>输出:<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_08.png" alt=""><br><a href="http://localhost:8080/body/4543" target="_blank" rel="external">http://localhost:8080/body/4543</a><br>输出<br><img src="http://okjl482qy.bkt.clouddn.com/idea_1_09.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blog.devzou.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.devzou.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>指针</title>
    <link href="https://blog.devzou.com/2017/11/03/c%E8%AF%AD%E8%A8%80/2017-11-03-%E6%8C%87%E9%92%88/"/>
    <id>https://blog.devzou.com/2017/11/03/c语言/2017-11-03-指针/</id>
    <published>2017-11-03T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.096Z</updated>
    
    <content type="html"><![CDATA[<p>指针是Ｃ语言中广泛使用的一种数据类型。指针是C语言的精华，利用指针变量可以表示各种数据结构； 能很方便地使用数组和字符串； 并能象汇编语言一样处理内存地址，从而编出精练而高效的程序。同时， 指针也是Ｃ语言中最为困难的一部分，在学习中除了要正确理解基本概念，还必须要多编程，上机调试。只要作到这些，指针也是不难掌握的。<br><a id="more"></a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念　"></a>概念　</h2><p>　　 指针变量的值是一个地址， 那么这个地址不仅可以是变量的地址， 也可以是其它数据结构的地址。在一个指针变量中存放一个数组或一个函数的首地址有何意义呢？ 因为数组或函数都是连续存放的。通过访问指针变量取得了数组或函数的首地址， 也就找到了该数组或函数。这样一来， 凡是出现数组，函数的地方都可以用一个指针变量来表示， 只要该指针变量中赋予数组或函数的首地址即可。这样做， 将会使程序的概念十分清楚，程序本身也精练，高效。在Ｃ语言中， 一种数据类型或数据结构往往都占有一组连续的内存单元。 用“地址”这个概念并不能很好地描述一种数据类型或数据结构， 而“指针”虽然实际上也是一个地址，但它却是一个数据结构的首地址， 它是“指向”一个数据结构的，因而概念更为清楚，表示更为明确。 这也是引入“指针”概念的一个重要原因。</p><h2 id="从实际出发"><a href="#从实际出发" class="headerlink" title="从实际出发"></a>从实际出发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">int p; //p是一个普通的整型变量  </div><div class="line">int *p; //首先从P 处开始,先与*结合,所以说明P 是一个指针,然后再与int 结合,说明指针所指向的内容的类型为int 型.所以P是一个返回整型数据的指针  </div><div class="line">int p[3]; //首先从P 处开始,先与[]结合,说明P 是一个数组,然后与int 结合,说明数组里的元素是整型的,所以P 是一个由整型数据组成的数组  </div><div class="line">int *p[3]; //首先从P 处开始,先与[]结合,因为其优先级比*高,所以P 是一个数组,然后再与*结合,说明数组里的元素是指针类型,然后再与int 结合,说明指针所指向的内容的类型是整型的,所以P 是一个由返回整型数据的指针所组成的数组  </div><div class="line">int (*p)[3]; //首先从P 处开始,先与*结合,说明P 是一个指针然后再与[]结合(与&quot;()&quot;这步可以忽略,只是为了改变优先级),说明指针所指向的内容是一个数组,然后再与int 结合,说明数组里的元素是整型的.所以P 是一个指向由整型数据组成的数组的指针  </div><div class="line">int **p; //首先从P 开始,先与*结合,说是P 是一个指针,然后再与*结合,说明指针所指向的元素是指针,然后再与int 结合,说明该指针所指向的元素是整型数据.由于二级指针以及更高级的指针极少用在复杂的类型中,所以后面更复杂的类型我们就不考虑多级指针了,最多只考虑一级指针.  </div><div class="line">int p(int); //从P 处起,先与()结合,说明P 是一个函数,然后进入()里分析,说明该函数有一个整型变量的参数,然后再与外面的int 结合,说明函数的返回值是一个整型数据  </div><div class="line">Int (*p)(int); //从P 处开始,先与指针结合,说明P 是一个指针,然后与()结合,说明指针指向的是一个函数,然后再与()里的int 结合,说明函数有一个int 型的参数,再与最外层的int 结合,说明函数的返回类型是整型,所以P 是一个指向有一个整型参数且返回类型为整型的函数的指针  </div><div class="line">int *(*p(int))[3]; //可以先跳过,不看这个类型,过于复杂从P 开始,先与()结合,说明P 是一个函数,然后进入()里面,与int 结合,说明函数有一个整型变量参数,然后再与外面的*结合,说明函数返回的是一个指针,,然后到最外面一层,先与[]结合,说明返回的指针指向的是一个数组,然后再与*结合,说明数组里的元素是指针,然后再与int 结合,说明指针指向的内容是整型数据.所以P 是一个参数为一个整数据且返回一个指向由整型指针变量组成的数组的指针变量的函数.</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;指针是Ｃ语言中广泛使用的一种数据类型。指针是C语言的精华，利用指针变量可以表示各种数据结构； 能很方便地使用数组和字符串； 并能象汇编语言一样处理内存地址，从而编出精练而高效的程序。同时， 指针也是Ｃ语言中最为困难的一部分，在学习中除了要正确理解基本概念，还必须要多编程，上机调试。只要作到这些，指针也是不难掌握的。&lt;br&gt;
    
    </summary>
    
      <category term="C语言" scheme="https://blog.devzou.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://blog.devzou.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>define与typedef用法总结</title>
    <link href="https://blog.devzou.com/2017/11/02/c%E8%AF%AD%E8%A8%80/2017-11-02-define%E4%B8%8Etypedef%20%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.devzou.com/2017/11/02/c语言/2017-11-02-define与typedef 用法总结/</id>
    <published>2017-11-02T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="define的用法"><a href="#define的用法" class="headerlink" title="define的用法"></a>define的用法</h2><p> #define为一宏定义语句，通常用它来定义常量(包括无参量与带参量)，以及用来实现那些“表面似和善、背后一长串”的宏，它本身并不在编 译过程中进行，而是在这之前(预处理过程)就已经完成了，但也因此难以发现潜在的错误及其它代码维护问题，它的实例像：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#define INT int</div><div class="line">#define TRUE 1 #define Add(a,b) ((a)+(b)); </div><div class="line">#define Loop_10 for (int i=0; i&lt;10; i++)</div></pre></td></tr></table></figure></p><h2 id="typedef的用法"><a href="#typedef的用法" class="headerlink" title="typedef的用法"></a>typedef的用法</h2><p> 在C/C++语言中，typedef常用来定义一个标识符及关键字的别名，它是语言编译过程的一部分，但它并不实际分配内存空间，实例像： typedef unsigned char UCHAR; typedef可以增强程序的可读性，以及标识符的灵活性，但它也有“非直观性”等缺点。</p><h2 id="define-与typedef的区别"><a href="#define-与typedef的区别" class="headerlink" title="define 与typedef的区别"></a>define 与typedef的区别</h2><ul><li>typedef给出的符号名称仅限于对类型，而不是对值</li><li>typedef的解释由编译器，而不是预处理器执行</li><li>虽然typedef的范围有限，但在其受限范围内,typedef比#define更灵活</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;define的用法&quot;&gt;&lt;a href=&quot;#define的用法&quot; class=&quot;headerlink&quot; title=&quot;define的用法&quot;&gt;&lt;/a&gt;define的用法&lt;/h2&gt;&lt;p&gt; #define为一宏定义语句，通常用它来定义常量(包括无参量与带参量)，以及用来实现那些“表面似和善、背后一长串”的宏，它本身并不在编 译过程中进行，而是在这之前(预处理过程)就已经完成了，但也因此难以发现潜在的错误及其它代码维护问题，它的实例像：&lt;br&gt;
    
    </summary>
    
      <category term="C语言" scheme="https://blog.devzou.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://blog.devzou.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>iPhone X 适配</title>
    <link href="https://blog.devzou.com/2017/10/20/ios/2017-10-20-iphone%20X%E9%80%82%E9%85%8D/"/>
    <id>https://blog.devzou.com/2017/10/20/ios/2017-10-20-iphone X适配/</id>
    <published>2017-10-20T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.130Z</updated>
    
    <content type="html"><![CDATA[<p>iPhone X 问世以后，每个有app的公司都要开始适配iPhone X了，以下是iPhone X适配的点<br><a id="more"></a></p><h2 id="你不得不知道的iPhone-X屏幕参数"><a href="#你不得不知道的iPhone-X屏幕参数" class="headerlink" title="你不得不知道的iPhone X屏幕参数"></a>你不得不知道的iPhone X屏幕参数</h2><p><img src="http://okjl482qy.bkt.clouddn.com/iphone%20X_adapt_01.png" alt=""></p><p>由上图可得iPhone X  <strong>画面大小为375pt*812pt</strong><br>                   <strong>实际解析度为 1125px*2436px</strong><br>                   屏幕垂直高度相对于4.7寸屏幕(iPhone 6,6s,7,8) 增加了145pt</p><h2 id="安全区域-竖屏"><a href="#安全区域-竖屏" class="headerlink" title="安全区域 竖屏"></a>安全区域 竖屏</h2><p>页面内容不能超过安全区域（Safe Area）<br>避免将触发交互行为的按钮放在屏幕的底部，人们会在屏幕底端使用手势进入主屏幕或切换应用（底部横条是Home键）同时避免将按钮等放在屏幕的角落中，这些系统的全局操作优先于App的操作<br><img src="http://okjl482qy.bkt.clouddn.com/iphone%20X_adapt_02.png" alt=""></p><h2 id="安全区域-横屏"><a href="#安全区域-横屏" class="headerlink" title="安全区域 横屏"></a>安全区域 横屏</h2><p><img src="http://okjl482qy.bkt.clouddn.com/iphone%20X_adapt_03.png" alt=""></p><h2 id="statusBar"><a href="#statusBar" class="headerlink" title="statusBar"></a>statusBar</h2><p>statusBar高度由原来的20pt变为44pt,增加了24pt</p><h2 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h2><p>tabBar的高度由原来的49pt变为83pt,增加了34pt</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iPhone X 问世以后，每个有app的公司都要开始适配iPhone X了，以下是iPhone X适配的点&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React Native布局</title>
    <link href="https://blog.devzou.com/2017/10/16/React-Native/2017-10-16-React-Native%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.devzou.com/2017/10/16/React-Native/2017-10-16-React-Native布局详解/</id>
    <published>2017-10-16T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.092Z</updated>
    
    <content type="html"><![CDATA[<p>在React Native中布局采用的是FleBox(弹性框)进行布局。本文章将向大家介绍React Native中的布局方式FlexBox。请参考<a href="http://facebook.github.io/react-native/docs/flexbox.html" target="_blank" rel="external">FlexBox弹性布局官方文档</a><br><a id="more"></a><br>FlexBox提供了在不同尺寸设备上都能保持一致的布局方式。FlexBox是CSS3弹性框布局规范，目前还处于最终征求意见稿 (Last Call Working Draft)阶段，并不是所有的浏览器都支持Flexbox。但大家在做React Native开发时大可不必担心FlexBox的兼容性问题，因为既然React Native选择用FlexBox布局，那么React Native对FlexBox的支持自然会做的很好。</p><h2 id="Flexbox的工作方式与在网络上的CSS中的异同点"><a href="#Flexbox的工作方式与在网络上的CSS中的异同点" class="headerlink" title="Flexbox的工作方式与在网络上的CSS中的异同点"></a>Flexbox的工作方式与在网络上的CSS中的异同点</h2><ol><li>flexDirection: React Native中默认为flexDirection:’column’，在Web CSS中默认为flex-direction:’row’</li><li>alignItems: React Native中默认为alignItems:’stretch’，在Web CSS中默认align-items:’flex-start’</li><li>flex: 相比Web CSS的flex接受多参数，如:flex: 2 2 10%;，但在 React Native中flex只接受一个参数</li><li>不支持属性：align-content，flex-basis，order，flex-basis，flex-flow，flex-grow，flex-shrink<h2 id="父视图属性-容器属性-："><a href="#父视图属性-容器属性-：" class="headerlink" title="父视图属性(容器属性)："></a>父视图属性(容器属性)：</h2></li></ol><ul><li>flexDirection enum(‘row’, ‘column’,’row-reverse’,’column-reverse’)</li><li>flexWrap enum(‘wrap’, ‘nowrap’)</li><li>justifyContent enum(‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’)</li><li>alignItems enum(‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’)<h3 id="flexDirection"><a href="#flexDirection" class="headerlink" title="flexDirection"></a>flexDirection</h3>flexDirection属性定义了父视图中的子元素沿横轴或侧轴方片的排列方式。<br><code>flexDirection enum(&#39;row&#39;, &#39;column&#39;,&#39;row-reverse&#39;,&#39;column-reverse&#39;)</code><blockquote><p>row: 从左向右依次排列<br>row-reverse: 从右向左依次排列<br>column(default): 默认的排列方式，从上向下排列<br>column-reverse: 从下向上排列</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123; &#123;<span class="attr">flexDirection</span>:<span class="string">'row'</span>,<span class="attr">backgroundColor</span>:<span class="string">"red"</span>,<span class="attr">marginTop</span>:<span class="number">20</span>,<span class="attr">flexWrap</span>:<span class="string">'wrap'</span>&#125;&#125;&gt;</div><div class="line">     &lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">20</span>,<span class="attr">backgroundColor</span>:<span class="string">"darkcyan"</span>,<span class="attr">margin</span>:<span class="number">5</span>&#125;&#125;&gt;</div><div class="line">        &lt;Text style=&#123; &#123;<span class="attr">fontSize</span>:<span class="number">16</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;<span class="number">1</span>&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>View&gt;</div><div class="line">     &lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">20</span>,<span class="attr">backgroundColor</span>:<span class="string">"darkcyan"</span>,<span class="attr">margin</span>:<span class="number">5</span>&#125;&#125;&gt;</div><div class="line">       &lt;Text style=&#123; &#123;<span class="attr">fontSize</span>:<span class="number">16</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;<span class="number">2</span>&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>View&gt;</div><div class="line">     &lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">20</span>,<span class="attr">backgroundColor</span>:<span class="string">"darkcyan"</span>,<span class="attr">margin</span>:<span class="number">5</span>&#125;&#125;&gt;</div><div class="line">       &lt;Text style=&#123; &#123;<span class="attr">fontSize</span>:<span class="number">16</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;<span class="number">3</span>&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>View&gt;</div><div class="line">     &lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">20</span>,<span class="attr">backgroundColor</span>:<span class="string">"darkcyan"</span>,<span class="attr">margin</span>:<span class="number">5</span>&#125;&#125;&gt;</div><div class="line">       &lt;Text style=&#123; &#123;<span class="attr">fontSize</span>:<span class="number">16</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;<span class="number">4</span>&lt;<span class="regexp">/Text&gt;</span></div><div class="line"><span class="regexp">     &lt;/</span>View&gt;</div><div class="line"> &lt;<span class="regexp">/View&gt;</span></div></pre></td></tr></table></figure><h3 id="flexWrap"><a href="#flexWrap" class="headerlink" title="flexWrap"></a>flexWrap</h3><p>flexWrap属性定义了子元素在父视图内是否允许多行排列，默认为nowrap。<br><code>flexWrap enum(&#39;wrap&#39;, &#39;nowrap&#39;)</code></p><blockquote><p>nowrap flex的元素只排列在一行上，可能导致溢出。<br>wrap flex的元素在一行排列不下时，就进行多行排列。</p></blockquote><h3 id="justifyContent"><a href="#justifyContent" class="headerlink" title="justifyContent"></a>justifyContent</h3><p>justifyContent属性定义了浏览器如何分配顺着父容器主轴的弹性（flex）元素之间及其周围的空间，默认为flex-start。</p><blockquote><p>flex-start(default) 从行首开始排列。每行第一个弹性元素与行首对齐，同时所有后续的弹性元素与前 一个对齐。<br>flex-end 从行尾开始排列。每行最后一个弹性元素与行尾对齐，其他元素将与后一个对齐。<br>center 伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。<br>space-between 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。<br>space-around 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。</p></blockquote><h3 id="alignItems"><a href="#alignItems" class="headerlink" title="alignItems"></a>alignItems</h3><p>alignItems属性以与justify-content相同的方式在侧轴方向上将当前行上的弹性元素对齐，默认为stretch。<br><code>alignItems enum(&#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</code></p><blockquote><p>flex-start 元素向侧轴起点对齐。<br>flex-end 元素向侧轴终点对齐。<br>center 元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。<br>stretch 弹性元素被在侧轴方向被拉伸到与容器相同的高度或宽度。</p></blockquote><h2 id="子视图属性"><a href="#子视图属性" class="headerlink" title="子视图属性"></a>子视图属性</h2><h3 id="alignSelf"><a href="#alignSelf" class="headerlink" title="alignSelf"></a>alignSelf</h3><p>alignSelf属性以属性定义了flex容器内被选中项目的对齐方式。注意：alignSelf 属性可重写灵活容器的 alignItems 属性。<br><code>alignSelf enum(&#39;auto&#39;, &#39;flex-start&#39;, &#39;flex-end&#39;, &#39;center&#39;, &#39;stretch&#39;)</code></p><blockquote><p>auto(default) 元素继承了它的父容器的 align-items 属性。如果没有父容器则为 “stretch”。<br>stretch 元素被拉伸以适应容器。<br>center 元素位于容器的中心。<br>flex-start 元素位于容器的开头。<br>flex-end 元素位于容器的结尾。</p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>flex 属性定义了一个可伸缩元素的能力，默认为0。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在React Native中布局采用的是FleBox(弹性框)进行布局。本文章将向大家介绍React Native中的布局方式FlexBox。请参考&lt;a href=&quot;http://facebook.github.io/react-native/docs/flexbox.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FlexBox弹性布局官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="React-Native" scheme="https://blog.devzou.com/categories/React-Native/"/>
    
    
      <category term="React-Naticve" scheme="https://blog.devzou.com/tags/React-Naticve/"/>
    
  </entry>
  
  <entry>
    <title>贝塞尔曲线的基本知识</title>
    <link href="https://blog.devzou.com/2017/09/13/ios/2017-09-13-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>https://blog.devzou.com/2017/09/13/ios/2017-09-13-贝塞尔曲线的基本知识/</id>
    <published>2017-09-13T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.130Z</updated>
    
    <content type="html"><![CDATA[<p>UIBezierPath是对Core Graphics框架的一个封装，使用UIBezierPath类我们可以画出我们想要的图形<br><a id="more"></a></p><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><p>UIBezierPath对象是CGPathRef数据类型的封装。path如果是基于矢量形状的，都用直线或曲线去创建。我们一般使用UIBezierPath都是在重写view的drawRect方法这种情形。我们用直线去创建矩形或多边形，使用曲线创建弧或者圆。创建和使用path对象步骤：<br>1、 重写View的drawRect方法<br>2、 创建UIBezierPath的对象<br>3、 使用方法moveToPoint: 设置初始点<br>4、 根据具体要求使用UIBezierPath类方法绘图（比如要画线、矩形、圆、弧？等）<br>5、 设置UIBezierPath对象相关属性 （比如lineWidth、lineJoinStyle、aPath.lineCapStyle、color）<br>6、 使用stroke 或者 fill方法结束绘图</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>以下代码是我从<code>UIBezierPath.h</code>中复制出来的，下面依次讲解每一个方法及属性，毕竟我们一手资料是先查看系统库的头文件<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  UIBezierPath.h</span></div><div class="line"><span class="comment">//  UIKit</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Copyright (c) 2009-2017 Apple Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;CoreGraphics/CoreGraphics.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKitDefines.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></div><div class="line"><span class="comment">/**/</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UIRectCorner</span>) &#123;</div><div class="line">    <span class="built_in">UIRectCornerTopLeft</span>     = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</div><div class="line">    <span class="built_in">UIRectCornerTopRight</span>    = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</div><div class="line">    <span class="built_in">UIRectCornerBottomLeft</span>  = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</div><div class="line">    <span class="built_in">UIRectCornerBottomRight</span> = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</div><div class="line">    <span class="built_in">UIRectCornerAllCorners</span>  = ~<span class="number">0</span>UL</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">3</span>_2) <span class="class"><span class="keyword">@interface</span> <span class="title">UIBezierPath</span> : <span class="title">NSObject</span>&lt;<span class="title">NSCopying</span>, <span class="title">NSSecureCoding</span>&gt;</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 标准初始化方法</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPath;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 根据矩形创建贝塞尔曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithRect:(<span class="built_in">CGRect</span>)rect;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 根据矩形框的内切圆画曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithOvalInRect:(<span class="built_in">CGRect</span>)rect;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 根据矩形画带圆角的曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithRoundedRect:(<span class="built_in">CGRect</span>)rect cornerRadius:(<span class="built_in">CGFloat</span>)cornerRadius; <span class="comment">// rounds all corners with the same horizontal and vertical radius</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 在矩形中，可以针对四角中的某个角加圆角</span></div><div class="line"><span class="comment"> @param rect   矩形</span></div><div class="line"><span class="comment"> @param corners 用来指定需要加圆角的位置，该参数为枚举值，具体枚举在UIRectCorner</span></div><div class="line"><span class="comment"> @param cornerRadii 参数用来设置圆角的大小</span></div><div class="line"><span class="comment"> @return 贝塞尔曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithRoundedRect:(<span class="built_in">CGRect</span>)rect byRoundingCorners:(<span class="built_in">UIRectCorner</span>)corners cornerRadii:(<span class="built_in">CGSize</span>)cornerRadii;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 以某个中心点画弧线</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> @param center 弧线中心点的坐标</span></div><div class="line"><span class="comment"> @param radius 弧线所在圆的半径</span></div><div class="line"><span class="comment"> @param startAngle 弧线开始的角度值</span></div><div class="line"><span class="comment"> @param endAngle 弧线结束的角度值</span></div><div class="line"><span class="comment"> @param clockwise 是否顺时针画弧线</span></div><div class="line"><span class="comment"> @return 贝塞尔曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithArcCenter:(<span class="built_in">CGPoint</span>)center radius:(<span class="built_in">CGFloat</span>)radius startAngle:(<span class="built_in">CGFloat</span>)startAngle endAngle:(<span class="built_in">CGFloat</span>)endAngle clockwise:(<span class="built_in">BOOL</span>)clockwise;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 通过path创建贝塞尔曲线</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="keyword">instancetype</span>)bezierPathWithCGPath:(<span class="built_in">CGPathRef</span>)<span class="built_in">CGPath</span>;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line"></div><div class="line"><span class="comment">// Returns an immutable CGPathRef which is only valid until the UIBezierPath is further mutated.</span></div><div class="line"><span class="comment">// Setting the path will create an immutable copy of the provided CGPathRef, so any further mutations on a provided CGMutablePathRef will be ignored.</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGPathRef</span> <span class="built_in">CGPath</span>;</div><div class="line">- (<span class="built_in">CGPathRef</span>)<span class="built_in">CGPath</span> <span class="built_in">NS_RETURNS_INNER_POINTER</span> <span class="built_in">CF_RETURNS_NOT_RETAINED</span>;</div><div class="line"></div><div class="line"><span class="comment">// Path construction</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * 设置起始点（调用这个方法的时候，会结束上一条线的绘制）</span></div><div class="line"><span class="comment"> */</span></div><div class="line">- (<span class="keyword">void</span>)moveToPoint:(<span class="built_in">CGPoint</span>)point;</div><div class="line">- (<span class="keyword">void</span>)addLineToPoint:(<span class="built_in">CGPoint</span>)point;</div><div class="line">- (<span class="keyword">void</span>)addCurveToPoint:(<span class="built_in">CGPoint</span>)endPoint controlPoint1:(<span class="built_in">CGPoint</span>)controlPoint1 controlPoint2:(<span class="built_in">CGPoint</span>)controlPoint2;</div><div class="line">- (<span class="keyword">void</span>)addQuadCurveToPoint:(<span class="built_in">CGPoint</span>)endPoint controlPoint:(<span class="built_in">CGPoint</span>)controlPoint;</div><div class="line">- (<span class="keyword">void</span>)addArcWithCenter:(<span class="built_in">CGPoint</span>)center radius:(<span class="built_in">CGFloat</span>)radius startAngle:(<span class="built_in">CGFloat</span>)startAngle endAngle:(<span class="built_in">CGFloat</span>)endAngle clockwise:(<span class="built_in">BOOL</span>)clockwise <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">4</span>_0);</div><div class="line">- (<span class="keyword">void</span>)closePath;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)removeAllPoints;</div><div class="line"></div><div class="line"><span class="comment">// Appending paths</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)appendPath:(<span class="built_in">UIBezierPath</span> *)bezierPath;</div><div class="line"></div><div class="line"><span class="comment">// Modified paths</span></div><div class="line"></div><div class="line">- (<span class="built_in">UIBezierPath</span> *)bezierPathByReversingPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// Transforming paths</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)applyTransform:(<span class="built_in">CGAffineTransform</span>)transform;</div><div class="line"></div><div class="line"><span class="comment">// Path info</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isEmpty) <span class="built_in">BOOL</span> empty;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">CGRect</span> bounds;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">CGPoint</span> currentPoint;</div><div class="line">- (<span class="built_in">BOOL</span>)containsPoint:(<span class="built_in">CGPoint</span>)point;</div><div class="line"></div><div class="line"><span class="comment">// Drawing properties</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> lineWidth;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGLineCap</span> lineCapStyle;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGLineJoin</span> lineJoinStyle;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> miterLimit; <span class="comment">// Used when lineJoinStyle is kCGLineJoinMiter</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> flatness;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> usesEvenOddFillRule; <span class="comment">// Default is NO. When YES, the even-odd fill rule is used for drawing, clipping, and hit testing.</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setLineDash:(<span class="keyword">nullable</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> *)pattern count:(<span class="built_in">NSInteger</span>)count phase:(<span class="built_in">CGFloat</span>)phase;</div><div class="line">- (<span class="keyword">void</span>)getLineDash:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)pattern count:(<span class="keyword">nullable</span> <span class="built_in">NSInteger</span> *)count phase:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)phase;</div><div class="line"></div><div class="line"><span class="comment">// Path operations on the current graphics context</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)fill;</div><div class="line">- (<span class="keyword">void</span>)stroke;</div><div class="line"></div><div class="line"><span class="comment">// These methods do not affect the blend mode or alpha of the current graphics context</span></div><div class="line">- (<span class="keyword">void</span>)fillWithBlendMode:(<span class="built_in">CGBlendMode</span>)blendMode alpha:(<span class="built_in">CGFloat</span>)alpha;</div><div class="line">- (<span class="keyword">void</span>)strokeWithBlendMode:(<span class="built_in">CGBlendMode</span>)blendMode alpha:(<span class="built_in">CGFloat</span>)alpha;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addClip;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIBezierPath是对Core Graphics框架的一个封装，使用UIBezierPath类我们可以画出我们想要的图形&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://blog.devzou.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.devzou.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>从运行原理及使用场景看Apache和Nginx</title>
    <link href="https://blog.devzou.com/2017/08/23/tech/2017-08-23-apache-and-nginx/"/>
    <id>https://blog.devzou.com/2017/08/23/tech/2017-08-23-apache-and-nginx/</id>
    <published>2017-08-23T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.147Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文只作为了解Apache和Nginx知识的一个梳理，想详细了解的请阅读文末参考链接中的博文。</strong></p><h2 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h2><p>Web服务器也称为WWW(WORLD WIDE WEB)服务器，主要功能是提供网上信息浏览服务。 </p><ul><li>应用层使用HTTP协议。 </li><li>HTML文档格式。 </li><li>浏览器统一资源定位器(URL)。 </li></ul><p>Web服务器常常以B/S（Browser/Server）方式提供服务。浏览器和服务器的交互方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">                GET /index.php HTTP/1.1</div><div class="line"></div><div class="line">+---------------+                   +----------------+</div><div class="line">|               +-------------------&gt;                |</div><div class="line">|   Browser     |                   |   Server       |</div><div class="line">|               &lt;-------------------+                |</div><div class="line">+---------------+                   +----------------+</div><div class="line"></div><div class="line">                  HTTP/1.1 200 OK</div></pre></td></tr></table></figure><ol><li>浏览器向服务器发出HTTP请求(Request)。</li><li>服务器收到浏览器的请求数据，经过分析处理，向浏览器输出响应数据（Response）。</li><li>浏览器收到服务器的响应数据，经过分析处理，将最终结果显示在浏览器中。</li></ol><p>Apache和Nginx都属于Web服务器，两者都实现了HTTP 1.1协议。</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Apache HTTP Server是Apache软件基金会的一个开放源代码的网页服务器，可以在大多数计算机操作系统中运行，由于其跨平台和安全性。被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的API扩充，将Perl／Python等解释器编译到服务器中。    – <a href="http://zh.wikipedia.org/wiki/Apache_HTTP_Server" target="_blank" rel="external">维基百科</a></p><h3 id="Apache组件"><a href="#Apache组件" class="headerlink" title="Apache组件"></a>Apache组件</h3><p>Apache是基于模块化设计的，它的核心代码并不多，大多数的功能都被分散到各个模块中，各个模块在系统启动的时候按需载入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">         +----------+</div><div class="line">      +- | Module   | -----------------+</div><div class="line">      |  +----------+                  |</div><div class="line">      |                          +------------+</div><div class="line">+-----------+   Apache HTTPD     | php module |</div><div class="line">| Module    |                    +------------+</div><div class="line">+-----------+              +----------+|</div><div class="line">      +----------+-------- |  MPM     |+</div><div class="line">                 |         +----+---+-+</div><div class="line">               +-v-----------+  |   |</div><div class="line">               |    ARP      &lt;--+   |</div><div class="line">               +------+------+      |</div><div class="line">                      |             |</div><div class="line">      +---------------v-------------v--+</div><div class="line">      |      Operating  System         |</div><div class="line">      +--------------------------------+</div></pre></td></tr></table></figure><p>MPM（Multi -Processing Modules，多重处理模块）是Apache的核心组件之一，Apache通过MPM来使用操作系统的资源，对进程和线程池进行管理。Apache为了能够获得最好的运行性能，针对不同的平台 (Unix/Linux、Window)做了优化，为不同的平台提供了不同的MPM，用户可以根据实际情况进行选择，其中最常使用的MPM有 prefork和worker两种。至于您的服务器正以哪种方式运行，取决于安装Apache过程中指定的MPM编译参数,在X系统上默认的编译参数为 prefork。</p><p>由于大多数的Unix都不支持真正的线程，所以采用了预派生子进程(prefork)方式，象Windows或者Solaris这些支持 线程的平台，基于多进程多线程混合的worker模式是一种不错的选择。Apache中还有一个重要的组件就是APR（Apache portable Runtime Library），即Apache可移植运行库，它是一个对操作系统调用的抽象库，用来实现Apache内部组件对操作系统的使用，提高系统的可移植性。 Apache对于php的解析，就是通过众多Module中的php Module来完成的。</p><h3 id="Apache生命周期"><a href="#Apache生命周期" class="headerlink" title="Apache生命周期"></a>Apache生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">+--------------------------------------------------------------+</div><div class="line">|                 +---------------------+       启动阶段        |</div><div class="line">|                 |    系统启动, 配置     |                      |</div><div class="line">|                 +----------+----------+                      |</div><div class="line">|                            |                                 |</div><div class="line">|                 +----------v----------+                      |</div><div class="line">|                 |      模块的初始化     |                      |</div><div class="line">|                 +-+--------+--------+-+                      |</div><div class="line">|                   |        |        |                        |</div><div class="line">|   +-------------+ | +------v-------+| +--------------+       |</div><div class="line">|   | 子进程初始化  |&lt;+ | 子进程初始化   |+&gt;|  子进程初始化  |       |</div><div class="line">|   +------+------+   +-------+------+  +-------+------+       |</div><div class="line">+--------------------------------------------------------------+</div><div class="line">|          |                  |                 |     运行阶段  |</div><div class="line">|     +----v----+        +----v----+       +----v----+         |</div><div class="line">|     | 请求循环 |        |  请求循环 |       | 请求循环 |         |</div><div class="line">|     +----+----+        +----+----+       +----+----+         |</div><div class="line">|          |                  |                 |              |</div><div class="line">|   +------v------+    +------v------+   +------v------+       |</div><div class="line">|   |  子进程结束   |    |  子进程结束  |   |   子进程结束  |       |</div><div class="line">|   +-------------+    +-------------+   +-------------+       |</div><div class="line">+--------------------------------------------------------------+</div></pre></td></tr></table></figure><p>这个生命周期是在perfork工作下的示意，从图中可以看出，Apache对于每一个请求都要启动一个单独的进程来处理。</p><h3 id="Apache的工作模式"><a href="#Apache的工作模式" class="headerlink" title="Apache的工作模式"></a>Apache的工作模式</h3><h4 id="prefork的工作原理"><a href="#prefork的工作原理" class="headerlink" title="prefork的工作原理"></a><strong>prefork的工作原理</strong></h4><p>一个单独的控制进程(父进程)负责产生子进程，这些子进程用于监听请求并作出应答。Apache总是试图保持一些备用的 (spare)或是空闲的子进程用于迎接即将到来的请求。这样客户端就无需在得到服务前等候子进程的产生。在Unix系统中，父进程通常以root身份运行以便邦定80端口，而 Apache产生的子进程通常以一个低特权的用户运行。User和Group指令用于配置子进程的低特权用户。运行子进程的用户必须要对他所服务的内容有读取的权限，但是对服务内容之外的其他资源必须拥有尽可能少的权限。</p><h4 id="worker的工作原理"><a href="#worker的工作原理" class="headerlink" title="worker的工作原理"></a><strong>worker的工作原理</strong></h4><p>每个进程能够拥有的线程数量是固定的。服务器会根据负载情况增加或减少进程数量。一个单独的控制进程(父进程)负责子进程的建立。每个子进程能够建立ThreadsPerChild数量的服务线程和一个监听线程，该监听线程监听接入请求并将其传递给服务线程处理和应答。Apache总是试图维持一个备用(spare)或是空闲的服务线程池。这样，客户端无须等待新线程或新进程的建立即可得到处理。在Unix中，为了能够绑定80端口，父进程一般都是以root身份启动，随后，Apache以较低权限的用户建立子进程和线程。User和Group指令用于配置Apache子进程的权限。虽然子进程必须对其提供的内容拥有读权限，但应该尽可能给予他较少的特权。另外，除非使用了suexec ，否则，这些指令配置的权限将被CGI脚本所继承。</p><h3 id="Apache的运行"><a href="#Apache的运行" class="headerlink" title="Apache的运行"></a>Apache的运行</h3><h4 id="启动阶段"><a href="#启动阶段" class="headerlink" title="启动阶段"></a>启动阶段</h4><p>在启动阶段，Apache主要进行配置文件解析(例如http.conf以及Include指令设定的配置文件等)、模块加载(例如mod_php.so,mod_perl.so等)和系统资源初始化（例如日志文件、共享内存段等）工作。在这个阶段，Apache为了获得系统资源最大的使用权限，将以特权用户root（X系统）或超级管理员administrator(Windows系统)完成启动。</p><p>这个过程可以通过下图来深入了解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">      +--------+      </div><div class="line">      |  开始   |      </div><div class="line">      +----+---+         </div><div class="line">           |</div><div class="line">+----------v------------+   解析主配置文件http.conf中配置信息， </div><div class="line">|     解析配置文件        |   像LoadModule, AddType</div><div class="line">+----------+------------+   等指令被加载至内存</div><div class="line">           |</div><div class="line">+----------v------------+   依据AddModule, LoadModule等指令</div><div class="line">|   加载静态/动态模块      |   加载Apache模块，像mod_php5.so被</div><div class="line">+----------+------------+   加载至内存，映射到Apache地址空间。</div><div class="line">           |</div><div class="line">+----------v------------+   日志文件、共享内存段，数据库链接</div><div class="line">|     系统资源初始化      |    等初始化</div><div class="line">+----------+------------+</div><div class="line">           |</div><div class="line">       +---v----+</div><div class="line">       |  结束   |</div><div class="line">       +--------+</div></pre></td></tr></table></figure><h4 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h4><p>在运行阶段，Apache主要工作是处理用户的服务请求。在这个阶段，Apache放弃特权用户级别，使用普通权限，这主要是基于安全性的考虑，防止由于代码的缺陷引起的安全漏洞。</p><p>由于Apache的Hook机制，Apache 允许模块(包括内部模块和外部模块，例如<code>mod_php5.so</code>,<code>mod_perl.so</code>等)将自定义的函数注入到请求处理循环中。<code>mod_php5.so</code>/<code>php5apache2.dll</code>就是将所包含的自定义函数，通过Hook机制注入到Apache中，在Apache处理流程的各个阶段负责处理php请求。</p><p>Apache将请求处理循环分为11个阶段，依次是：Post-Read-Request，URI Translation，Header Parsing，Access Control，Authentication，Authorization，MIME Type Checking，FixUp，Response，Logging，CleanUp。</p><p>Apache处理http请求的生命周期:</p><p><img src="http://7u2ho6.com1.z0.glb.clouddn.com/tech-apache-http-handle.jpg" alt="Apache处理http请求的生命周期"></p><ol><li>Post-Read-Request阶段:在正常请求处理流程中，这是模块可以插入钩子的第一个阶段。对于那些想很早进入处理请求的模块来说，这个阶段可以被利用。</li><li>URI Translation阶段 :  Apache在本阶段的主要工作：将请求的URL映射到本地文件系统。模块可以在这阶段插入钩子，执行自己的映射逻辑。mod_alias就是利用这个阶段工作的。</li><li>Header Parsing阶段 :  Apache在本阶段的主要工作：检查请求的头部。由于模块可以在请求处理流程的任何一个点上执行检查请求头部的任务，因此这个钩子很少被使用。mod_setenvif就是利用这个阶段工作的。</li><li>Access Control阶段 :  Apache在本阶段的主要工作：根据配置文件检查是否允许访问请求的资源。Apache的标准逻辑实现了允许和拒绝指令。mod_authz_host就是利用这个阶段工作的。</li><li>Authentication阶段 :  Apache在本阶段的主要工作：按照配置文件设定的策略对用户进行认证，并设定用户名区域。模块可以在这阶段插入钩子，实现一个认证方法。</li><li>Authorization阶段 :  Apache在本阶段的主要工作：根据配置文件检查是否允许认证过的用户执行请求的操作。模块可以在这阶段插入钩子，实现一个用户权限管理的方法。</li><li>MIME Type Checking阶段 :  Apache在本阶段的主要工作：根据请求资源的MIME类型的相关规则，判定将要使用的内容处理函数。标准模块mod_negotiation和mod_mime实现了这个钩子。</li><li>FixUp阶段 :  这是一个通用的阶段，允许模块在内容生成器之前，运行任何必要的处理流程。和Post_Read_Request类似，这是一个能够捕获任何信息的钩子，也是最常使用的钩子。</li><li>Response阶段 : Apache在本阶段的主要工作：生成返回客户端的内容，负责给客户端发送一个恰当的回复。这个阶段是整个处理流程的核心部分。</li><li>Logging阶段 :  Apache在本阶段的主要工作：在回复已经发送给客户端之后记录事务。模块可能修改或者替换Apache的标准日志记录。</li><li>CleanUp阶段 : Apache在本阶段的主要工作：清理本次请求事务处理完成之后遗留的环境，比如文件、目录的处理或者Socket的关闭等等，这是Apache一次请求处理的最后一个阶段。</li></ol><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>Nginx（发音同engine x）是一款由俄罗斯程序员Igor Sysoev所开发轻量级的网页服务器、反向代理服务器以及电子邮件（IMAP/POP3）代理服务器。起初是供俄国大型的门户网站及搜索引擎Rambler（俄语：Рамблер）使用。  – <a href="http://zh.wikipedia.org/wiki/Nginx" target="_blank" rel="external">维基百科</a></p><h3 id="Nginx的模块与工作原理"><a href="#Nginx的模块与工作原理" class="headerlink" title="Nginx的模块与工作原理"></a>Nginx的模块与工作原理</h3><p>Nginx由内核和模块组成，其中，内核的设计非常微小和简洁，完成的工作也非常简单，仅仅通过查找配置文件将客户端请求映射到一个location block（location是Nginx配置中的一个指令，用于URL匹配），而在这个location中所配置的每个指令将会启动不同的模块去完成相应的工作。</p><p>Nginx的模块从结构上分为核心模块、基础模块和第三方模块：</p><ul><li>核心模块：HTTP模块、EVENT模块和MAIL模块</li><li>基础模块：HTTP Access模块、HTTP FastCGI模块、HTTP Proxy模块和HTTP Rewrite模块，</li><li>第三方模块：HTTP Upstream Request Hash模块、Notice模块和HTTP Access Key模块。</li></ul><p>Nginx的模块从功能上分为如下三类:</p><ul><li>Handlers（处理器模块）。此类模块直接处理请求，并进行输出内容和修改headers信息等操作。Handlers处理器模块一般只能有一个。</li><li>Filters （过滤器模块）。此类模块主要对其他处理器模块输出的内容进行修改操作，最后由Nginx输出。</li><li>Proxies （代理类模块）。此类模块是Nginx的HTTP Upstream之类的模块，这些模块主要与后端一些服务比如FastCGI等进行交互，实现服务代理和负载均衡等功能。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">                     +                    ^</div><div class="line">        Http Request |                    |  Http Response</div><div class="line">                     |                    |</div><div class="line">    +---------+------v-----+         +----+----+</div><div class="line">    |  Conf   | Nginx Core |         | FilterN |</div><div class="line">    +---------+------+-----+         +----^----+</div><div class="line">                     |                    |</div><div class="line">                     |               +----+----+</div><div class="line">                     |               | Filter2 |</div><div class="line">choose a handler     |               +----^----+</div><div class="line">based conf           |                    |</div><div class="line">                     |               +----+----+</div><div class="line">                     |               | Filter1 |</div><div class="line">                     |               +----^----+</div><div class="line">                     |                    | Generate content</div><div class="line">               +-----v--------------------+----+</div><div class="line">               |           Handler             |</div><div class="line">               +-------------------------------+</div></pre></td></tr></table></figure><p>Nginx本身做的工作实际很少，当它接到一个HTTP请求时，它仅仅是通过查找配置文件将此次请求映射到一个location block，而此location中所配置的各个指令则会启动不同的模块去完成工作，因此模块可以看做Nginx真正的劳动工作者。通常一个location中的指令会涉及一个handler模块和多个filter模块（当然，多个location可以复用同一个模块）。handler模块负责处理请求，完成响应内容的生成，而filter模块对响应内容进行处理。</p><h3 id="Nginx架构及工作流程"><a href="#Nginx架构及工作流程" class="headerlink" title="Nginx架构及工作流程"></a>Nginx架构及工作流程</h3><p><img src="http://7u2ho6.com1.z0.glb.clouddn.com/tech-nginx-architecture.png" alt="Nginx架构"></p><p>上图是Nginx的架构，这个架构类似于Apache的Worker工作状态，Nginx的每一个Worker进程都管理着大量的线程，真正处理请求的是Worker之下的线程。</p><p>所有实际上的业务处理逻辑都在worker进程。worker进程中有一个函数，执行无限循环，不断处理收到的来自客户端的请求，并进行处理，直到整个nginx服务被停止。Worker中这个函数执行内容如下：</p><ol><li>操作系统提供的机制（例如epoll, kqueue等）产生相关的事件。</li><li>接收和处理这些事件，如是接受到数据，则产生更高层的request对象。</li><li>处理request的header和body。</li><li>产生响应，并发送回客户端。</li><li>完成request的处理。</li><li>重新初始化定时器及其他事件。</li></ol><h3 id="Nginx和FastCGI"><a href="#Nginx和FastCGI" class="headerlink" title="Nginx和FastCGI"></a>Nginx和FastCGI</h3><h4 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h4><p>FastCGI是一个可伸缩地、高速地在HTTP server和动态脚本语言间通信的接口。多数流行的HTTP server都支持FastCGI，包括Apache、Nginx和lighttpd等。同时，FastCGI也被许多脚本语言支持，其中就有PHP。</p><p>FastCGI是从CGI发展改进而来的。传统CGI接口方式的主要缺点是性能很差，因为每次HTTP服务器遇到动态程序时都需要重新启动脚本解析器来执行解析，然后将结果返回给HTTP服务器。这在处理高并发访问时几乎是不可用的。另外传统的CGI接口方式安全性也很差，现在已经很少使用了。</p><p>FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p><h4 id="Nging和FastCGI合作"><a href="#Nging和FastCGI合作" class="headerlink" title="Nging和FastCGI合作"></a>Nging和FastCGI合作</h4><p>Nginx不支持对外部程序的直接调用或者解析，所有的外部程序（包括PHP）必须通过FastCGI接口来调用。FastCGI接口在Linux下是socket（这个socket可以是文件socket，也可以是ip socket）。</p><p>接下来以Nginx下PHP的运行过程来说明。PHP-FPM是管理FastCGI的一个管理器，它作为PHP的插件存在。</p><ol><li>FastCGI进程管理器php-fpm自身初始化，启动主进程php-fpm和启动start_servers个CGI 子进程。主进程php-fpm主要是管理fastcgi子进程，监听9000端口。fastcgi子进程等待来自Web Server的连接。</li><li>当客户端请求到达Web Server Nginx是时，Nginx通过location指令，将所有以php为后缀的文件都交给127.0.0.1:9000来处理，即Nginx通过location指令，将所有以php为后缀的文件都交给127.0.0.1:9000来处理。</li><li>FastCGI进程管理器PHP-FPM选择并连接到一个子进程CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程。</li><li>FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。</li><li>FastCGI子进程接着等待并处理来自FastCGI进程管理器（运行在 WebServer中）的下一个连接。</li></ol><h2 id="Apache和Nginx比较"><a href="#Apache和Nginx比较" class="headerlink" title="Apache和Nginx比较"></a>Apache和Nginx比较</h2><h3 id="功能对比"><a href="#功能对比" class="headerlink" title="功能对比"></a>功能对比</h3><p>Nginx和Apache一样，都是HTTP服务器软件，在功能实现上都采用模块化结构设计，都支持通用的语言接口，如PHP、Perl、Python等，同时还支持正向和反向代理、虚拟主机、URL重写、压缩传输、SSL加密传输等。</p><ol><li>在功能实现上，Apache的所有模块都支持动、静态编译，而Nginx模块都是静态编译的，</li><li>对FastCGI的支持，Apache对Fcgi的支持不好，而Nginx对Fcgi的支持非常好；</li><li>在处理连接方式上，Nginx支持epoll，而Apache却不支持；</li><li>在空间使用上，Nginx安装包仅仅只有几百K，和Nginx比起来Apache绝对是庞然大物。</li></ol><h3 id="Nginx相对apache的优点"><a href="#Nginx相对apache的优点" class="headerlink" title="Nginx相对apache的优点"></a>Nginx相对apache的优点</h3><ul><li>轻量级，同样起web 服务，比apache 占用更少的内存及资源</li><li>静态处理，Nginx 静态处理性能比 Apache 高 3倍以上</li><li>抗并发，nginx 处理请求是异步非阻塞的，而apache则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能。在Apache+PHP（prefork）模式下，如果PHP处理慢或者前端压力很大的情况下，很容易出现Apache进程数飙升，从而拒绝服务的现象。 </li><li>高度模块化的设计，编写模块相对简单</li><li>社区活跃，各种高性能模块出品迅速啊</li></ul><h3 id="apache相对nginx的优点"><a href="#apache相对nginx的优点" class="headerlink" title="apache相对nginx的优点"></a>apache相对nginx的优点</h3><ul><li>rewrite，比nginx 的rewrite 强大</li><li>模块超多，基本想到的都可以找到</li><li>少bug，nginx的bug相对较多</li><li>超稳定</li><li>Apache对PHP支持比较简单，Nginx需要配合其他后端用 </li></ul><h3 id="选择Nginx的优势所在"><a href="#选择Nginx的优势所在" class="headerlink" title="选择Nginx的优势所在"></a>选择Nginx的优势所在</h3><ol><li>作为Web服务器: Nginx处理静态文件、索引文件，自动索引的效率非常高。</li><li>作为代理服务器，Nginx可以实现无缓存的反向代理加速，提高网站运行速度。</li><li>作为负载均衡服务器，Nginx既可以在内部直接支持Rails和PHP，也可以支持HTTP代理服务器对外进行服务，同时还支持简单的容错和利用算法进行负载均衡。</li><li>在性能方面，Nginx是专门为性能优化而开发的，在实现上非常注重效率。它采用内核Poll模型(epoll and kqueue )，可以支持更多的并发连接，最大可以支持对50 000个并发连接数的响应，而且只占用很低的内存资源。</li><li>在稳定性方面，Nginx采取了分阶段资源分配技术，使得CPU与内存的占用率非常低。Nginx官方表示，Nginx保持10 000个没有活动的连接，而这些连接只占用2.5MB内存，因此，类似DOS这样的攻击对Nginx来说基本上是没有任何作用的。</li><li>在高可用性方面，Nginx支持热部署，启动速度特别迅速，因此可以在不间断服务的情况下，对软件版本或者配置进行升级，即使运行数月也无需重新启动，几乎可以做到7×24小时不间断地运行。</li></ol><h2 id="同时使用Nginx和Apache"><a href="#同时使用Nginx和Apache" class="headerlink" title="同时使用Nginx和Apache"></a>同时使用Nginx和Apache</h2><p>由于Nginx和Apache各自的优势，现在很多人选择了让两者在服务器中共存。在服务器端让Nginx在前，Apache在后。由Nginx做负载均衡和反向代理，并且处理静态文件，讲动态请求（如PHP应用）交给Apache去处理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://blog.csdn.net/hguisu/article/details/7395181" target="_blank" rel="external">Apache运行机制剖析</a></li><li><a href="http://qing.blog.sina.com.cn/tj/69004f5933000xlt.html" target="_blank" rel="external">Apache处理http请求的生命周期</a></li><li><a href="http://tengine.taobao.org/book/chapter_02.html" target="_blank" rel="external">Nginx平台初探</a></li><li><a href="http://liuxun.org/blog/nginx-jia-gou-zong-lan/" target="_blank" rel="external">Nginx架构综述</a></li><li><a href="http://blog.csdn.net/hguisu/article/details/7403622" target="_blank" rel="external">Apache, nginx, lighttpd性能比较</a></li></ol>]]></content>
    
    <summary type="html">
    
      用正确的工具，做正确的事情。
    
    </summary>
    
      <category term="技术" scheme="https://blog.devzou.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Nginx" scheme="https://blog.devzou.com/tags/Nginx/"/>
    
      <category term="Apache" scheme="https://blog.devzou.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Java入门教程之面向对象</title>
    <link href="https://blog.devzou.com/2017/08/06/Java/2017-08-06-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://blog.devzou.com/2017/08/06/Java/2017-08-06-面向对象/</id>
    <published>2017-08-06T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><p>万物皆对象,客观存在的事物皆为对象</p><h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><h2 id="什么是对象的属性"><a href="#什么是对象的属性" class="headerlink" title="什么是对象的属性"></a>什么是对象的属性</h2><p>对象具有的各种特征<br>每个对象的每个属性都拥有特定值<br><a id="more"></a></p><h2 id="什么事对象的方法"><a href="#什么事对象的方法" class="headerlink" title="什么事对象的方法"></a>什么事对象的方法</h2><p>对象执行的操作</p><h2 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h2><p>类是抽象的概念,仅仅是模板</p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>在类中定义,用来描述对象将要有什么</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在类的方法中定义,在方法中临时保存数据</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>使用new+构造方法 创建一个新的对象<br>构造方法是定义在Java类中的一个用来初始化对象的方法<br>构造方法与类同名且没有返回值</p><h2 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h2><p>方法名相同,但参数不同的多个方法,调用时会自动根据不同的参数选择相应的方法</p><p>## </p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类是模子,确定对象将会拥有的特征(属性)和行为(方法)<br><strong>类的特点:</strong><br>         类是对象的类型<br>         具有相同属性和方法的一组对象的集合</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是对象&quot;&gt;&lt;a href=&quot;#什么是对象&quot; class=&quot;headerlink&quot; title=&quot;什么是对象&quot;&gt;&lt;/a&gt;什么是对象&lt;/h2&gt;&lt;p&gt;万物皆对象,客观存在的事物皆为对象&lt;/p&gt;
&lt;h2 id=&quot;什么是面向对象&quot;&gt;&lt;a href=&quot;#什么是面向对象&quot; class=&quot;headerlink&quot; title=&quot;什么是面向对象&quot;&gt;&lt;/a&gt;什么是面向对象&lt;/h2&gt;&lt;h2 id=&quot;什么是对象的属性&quot;&gt;&lt;a href=&quot;#什么是对象的属性&quot; class=&quot;headerlink&quot; title=&quot;什么是对象的属性&quot;&gt;&lt;/a&gt;什么是对象的属性&lt;/h2&gt;&lt;p&gt;对象具有的各种特征&lt;br&gt;每个对象的每个属性都拥有特定值&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blog.devzou.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.devzou.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>安卓初级开发之使用Fragment建立动态UI</title>
    <link href="https://blog.devzou.com/2017/07/23/android/2017-07-23/"/>
    <id>https://blog.devzou.com/2017/07/23/android/2017-07-23/</id>
    <published>2017-07-23T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建-Fragment"><a href="#创建-Fragment" class="headerlink" title="创建 Fragment"></a>创建 Fragment</h2><p>  可以把 Fragment 想象成 Activity 的模块，它拥有自己的生命周期、接收输入事件，可以在 Acvitity 运行过程中添加或者移除（有点像“子 Activity”，可以在不同的 Activity 里重复使用）。这一课教我们将学习继承  <a href="https://developer.android.com/tools/support-library/index.html" target="_blank" rel="external">Support Library</a>中的 <a href="https://developer.android.com/reference/android/support/v4/app/Fragment.html" target="_blank" rel="external">Fragment</a>，使 APP 在 Android 1.6 这样的低版本上仍能保持兼容。</p><p>   在开始之前，必须在项目中先引用 Support Library。如果你从未使用过 Support Library，可根据文档 <a href="https://developer.android.com/tools/support-library/setup.html" target="_blank" rel="external">设置 Support Library</a> 在项目中使用 v4 库。当然，也可以使用包含 <a href="https://developer.android.com/training/appbar/index.html" target="_blank" rel="external">APP Bar</a> 的 v7 appcompat 库。该库兼容 Android 2.1 (API level 7)，同时也包含了 Fragment API。    </p><h3 id="创建-Fragment-类"><a href="#创建-Fragment-类" class="headerlink" title="创建 Fragment 类"></a>创建 Fragment 类</h3><p>   首先从 Fragment 继承并创建 Fragment，然后在关键的生命周期方法中插入代码（就和在处理 Activity 时一样）。</p><p>其中一个区别是：创建 Fragment 时，必须重写 onCreateView() 回调方法来定义布局。事实上，这是唯一一个为使 Fragment 运行起来需要重写的回调方法。比如，下面是一个自定义布局的示例 Fragment：</p>]]></content>
    
    <summary type="html">
    
      为了在 Android 上为用户提供动态的、多窗口的交互体验，需要将 UI 组件和Activity 操作封装成模块进行使用，这样我们就可以在 Activity 中对这些模块进行切入切出操作。可以用Fragment 创建这些模块，Fragment 就像一个嵌套的 Activity，拥有自己的布局（Layout）并管理自己的生命期。Fragment 定义了自己的布局后，它可以在 Activity 中与其他 Fragment 生成不同的组合，从而为不同的屏幕尺寸生成不同的布局（小屏幕一次也许只能显示一个 Fragment，大屏幕则可以显示更多）。本章将展示如何用 Fragment 创建动态界面，并在不同屏幕尺寸的设备上优化 APP 的用户体验。本章内容支持 Android 1.6 以上的设备。
    
    </summary>
    
      <category term="Android" scheme="https://blog.devzou.com/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blog.devzou.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>IDEA部署你的web项目</title>
    <link href="https://blog.devzou.com/2017/07/21/Java/2017-07-21-IDEA%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84web%E9%A1%B9%E7%9B%AE/"/>
    <id>https://blog.devzou.com/2017/07/21/Java/2017-07-21-IDEA部署你的web项目/</id>
    <published>2017-07-21T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p> 下载tomcat<br> <a href="http://tomcat.apache.org/" target="_blank" rel="external">http://tomcat.apache.org/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt; 下载tomcat&lt;br&gt; &lt;a href=&quot;http://tomcat.apache.org/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="Java" scheme="https://blog.devzou.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.devzou.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript变量作用域</title>
    <link href="https://blog.devzou.com/2017/07/13/web%E5%89%8D%E7%AB%AF/2017-07-13-javascript-variable-domain/"/>
    <id>https://blog.devzou.com/2017/07/13/web前端/2017-07-13-javascript-variable-domain/</id>
    <published>2017-07-13T00:10:09.000Z</published>
    <updated>2018-04-06T13:55:52.151Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自:<a href="http://www.cnblogs.com/rainman/archive/2009/04/28/1445687.html" target="_blank" rel="external">http://www.cnblogs.com/rainman/archive/2009/04/28/1445687.html</a>,略改</p></blockquote><ul><li>JavaScript的变量作用域是基于其特有的作用域链</li><li>JavaScript没有块级作用域</li><li>函数中声明的变量在整个函数中都有定义</li></ul><h2 id="1-JavaScript的作用域链"><a href="#1-JavaScript的作用域链" class="headerlink" title="1.JavaScript的作用域链"></a>1.JavaScript的作用域链</h2><pre><code>var rain = 1;function rainman(){  var man = 2;  funciton inner(){    var innerVar = 4;    alert(rain);  }  inner();}rainman();</code></pre><p>在alert(rain);这句代码，JavaScript首先在inner函数中检查，否则则在rainman中查找，这段代码在rainmain()中没有定义，则最终查找的是全局变量中的rain。</p><p>作用域链：JavaScript需要查找一个变量时，首先查找作用域链第一个对象，如果第一个对象没有定义，则顺序向后查找。</p><h2 id="2-函数体内部，局部变量的优先级比同名的全局变量高"><a href="#2-函数体内部，局部变量的优先级比同名的全局变量高" class="headerlink" title="2.函数体内部，局部变量的优先级比同名的全局变量高"></a>2.函数体内部，局部变量的优先级比同名的全局变量高</h2><pre><code>var rain = 1;function check(){  var rain = 100;  alert(rain);}check();    //100 alert(rain);  //1</code></pre><h2 id="3-JavaScript没有快级作用域"><a href="#3-JavaScript没有快级作用域" class="headerlink" title="3.JavaScript没有快级作用域"></a>3.JavaScript没有快级作用域</h2><pre><code>function rainmain(){  //rainman 函数体内存在三个局部变量 i j k   var i = 0;  if(1){    var j = 0;    for(var k=0;k&lt;3;k++)      alert(k);  //0,1,2    alert(k);  // 3  }  alert(j);  //0}</code></pre><p>i,j,k的作用域是相同的，他们在rainmain中是全局的</p><h2 id="4-函数中声明的变量在整个函数中都有定义"><a href="#4-函数中声明的变量在整个函数中都有定义" class="headerlink" title="4.函数中声明的变量在整个函数中都有定义"></a>4.函数中声明的变量在整个函数中都有定义</h2><pre><code>function rain(){  var x = 1;  function man(){    x = 100;  }  man();    //调用man  alert(x);  //这里会弹出100}rain();   //调用rain</code></pre><p>上面代码说明，变量x在整个rain体内都可以使用，并可以重新幅值。但是会有以下情况产生:</p><pre><code>var x = 1;function rain(){  alert(x);   //undefined  var x = &apos;3&apos;;  alert(x);   //3}</code></pre><p>是由于rain定义了x，它会隐藏同名全局变量x。由于alert时还未定义，所以undefined</p><h2 id="5-未使用var关键字定义的变量都是全局变量"><a href="#5-未使用var关键字定义的变量都是全局变量" class="headerlink" title="5.未使用var关键字定义的变量都是全局变量"></a>5.未使用var关键字定义的变量都是全局变量</h2><pre><code>function rain(){  x = 100;}rain();alert(x);  //100</code></pre><h2 id="6-全局变量都是window对象的属性"><a href="#6-全局变量都是window对象的属性" class="headerlink" title="6.全局变量都是window对象的属性"></a>6.全局变量都是window对象的属性</h2><pre><code>var x = 100;alert(window.x); //100</code></pre>]]></content>
    
    <summary type="html">
    
      转载学习
    
    </summary>
    
      <category term="技术" scheme="https://blog.devzou.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JavaScript" scheme="https://blog.devzou.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>python的import机制</title>
    <link href="https://blog.devzou.com/2017/07/04/python/2017-07-10-%20python%20%E7%9A%84import%E6%9C%BA%E5%88%B6/"/>
    <id>https://blog.devzou.com/2017/07/04/python/2017-07-10- python 的import机制/</id>
    <published>2017-07-04T00:10:09.000Z</published>
    <updated>2018-04-01T09:34:38.888Z</updated>
    
    <content type="html"><![CDATA[<p>python中，每个py文件被称之为模块，每个具有<strong>init</strong>.py文件的目录被称为包。只要模块或者包所在的目录在sys.path中，就可以使用import 模块或import 包来使用。 </p><p>如果想使用非当前模块中的代码，需要使用Import，这个大家都知道。<br>如果你要使用的模块（py文件）和当前模块在同一目录，只要import相应的文件名就好，比如在a.py中使用b.py：<br>import b<br>但是如果要import一个不同目录的文件(例如b.py)该怎么做呢？<br>首先需要使用sys.path.append方法将b.py所在目录加入到搜素目录中。然后进行import即可，例如<br>import sys<br>sys.path.append(‘c:\xxxx\b.py’) # 这个例子针对 windows 用户来说的<br>大多数情况，上面的代码工作的很好。但是如果你没有发现上面代码有什么问题的话，可要注意了，上面的代码有时会找不到模块或者包（ImportError: No module named xxxxxx），这是因为：<br>sys模块是使用c语言编写的，因此字符串支持 ‘\n’, ‘\r’, ‘\t’等来表示特殊字符。所以上面代码最好写成：<br>sys.path.append(‘c:\xxx\b.py’)<br>或者sys.path.append(‘c:/xxxx/b.py’)<br>这样可以避免因为错误的组成转义字符，而造成无效的搜索目录（sys.path）设置。 </p>]]></content>
    
    <summary type="html">
    
      python的import机制
    
    </summary>
    
      <category term="python" scheme="https://blog.devzou.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.devzou.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2终端配色</title>
    <link href="https://blog.devzou.com/2017/07/04/tool/2017-07-04-iTerm2%E7%BB%88%E7%AB%AF%E9%85%8D%E8%89%B2%20/"/>
    <id>https://blog.devzou.com/2017/07/04/tool/2017-07-04-iTerm2终端配色 /</id>
    <published>2017-07-04T00:10:09.000Z</published>
    <updated>2018-04-01T09:34:38.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改-bash-profile-配置文件-具体作用看每行注释-保留英文原文"><a href="#修改-bash-profile-配置文件-具体作用看每行注释-保留英文原文" class="headerlink" title="修改 .bash_profile 配置文件, 具体作用看每行注释 (保留英文原文)"></a>修改 .bash_profile 配置文件, 具体作用看每行注释 (保留英文原文)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ~/.bash_profile</div></pre></td></tr></table></figure><p>添加如下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># enables colorin the terminal bash shell export</span></div><div class="line"><span class="built_in">export</span> CLICOLOR=1</div><div class="line"><span class="comment"># sets up thecolor scheme for list export</span></div><div class="line"><span class="built_in">export</span> LSCOLORS=gxfxcxdxbxegedabagacad</div><div class="line"><span class="comment"># sets up theprompt color (currently a green similar to linux terminal)</span></div><div class="line"><span class="built_in">export</span> PS1=<span class="string">'\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ '</span></div><div class="line"><span class="comment"># enables colorfor iTerm</span></div><div class="line"><span class="built_in">export</span> TERM=xterm-color</div></pre></td></tr></table></figure></p><p>保存退出, 使其生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></p><h2 id="设置iTerm2使其生效"><a href="#设置iTerm2使其生效" class="headerlink" title="设置iTerm2使其生效"></a>设置iTerm2使其生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. preference-&gt;profiles-&gt;Default-&gt;Terminal-&gt;xterm-new  设置终端类型</div><div class="line">2. preference-&gt;profiles-&gt;Default-&gt;Colors  选择一个自己喜欢的配色</div></pre></td></tr></table></figure><h2 id="下载配色文件-里面包含多种配色方案"><a href="#下载配色文件-里面包含多种配色方案" class="headerlink" title="下载配色文件, 里面包含多种配色方案"></a>下载配色文件, 里面包含多种配色方案</h2><p>Github地址: <a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="external">https://github.com/mbadolato/iTerm2-Color-Schemes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改-bash-profile-配置文件-具体作用看每行注释-保留英文原文&quot;&gt;&lt;a href=&quot;#修改-bash-profile-配置文件-具体作用看每行注释-保留英文原文&quot; class=&quot;headerlink&quot; title=&quot;修改 .bash_profile 配
      
    
    </summary>
    
      <category term="Tool" scheme="https://blog.devzou.com/categories/Tool/"/>
    
    
      <category term="Tool" scheme="https://blog.devzou.com/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>学习numpy</title>
    <link href="https://blog.devzou.com/2017/07/04/machinelearning/2017-07-05-numpy/"/>
    <id>https://blog.devzou.com/2017/07/04/machinelearning/2017-07-05-numpy/</id>
    <published>2017-07-04T00:10:09.000Z</published>
    <updated>2018-04-01T09:34:38.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Numpy简介"><a href="#Numpy简介" class="headerlink" title="Numpy简介"></a>Numpy简介</h2><p>Numpy是一个用python实现的科学计算包。包括：1、一个强大的N维数组对象Array；2、比较成熟的（广播）函数库；3、用于整合C/C++和Fortran代码的工具包；4、实用的线性代数、傅里叶变换和随机数生成函数。numpy和稀疏矩阵运算包scipy配合使用更加方便。<br>NumPy（Numeric Python）提供了许多高级的数值编程工具，如：矩阵数据类型、矢量处理，以及精密的运算库。专为进行严格的数字处理而产生。多为很多大型金融公司使用，以及核心的科学计算组织如：Lawrence Livermore，NASA用其处理一些本来使用C++，Fortran或Matlab等所做的任务。</p><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><p>NumPy的主要对象是同种元素的多维数组。这是一个所有的元素都是一种类型、通过一个正整数元组索引的元素表格(通常是元素是数字)。在NumPy中维度(dimensions)叫做轴(axes)，轴的个数叫做秩(rank)。</p><h2 id="方法简介"><a href="#方法简介" class="headerlink" title="方法简介"></a>方法简介</h2><p>ndarray.ndim   数组轴的个数，在python的世界中，轴的个数被称作秩<br>ndarray.shape  数组的维度。这是一个指示数组在每个维度上大小的整数元组。例如一个n排m列的矩阵，它<br>               的shape属性将是(2,3),这个元组的长度显然是秩，即维度或者ndim属性<br>ndarray.size   数组元素的总个数，等于shape属性中元组元素的乘积。<br>ndarray.dtype  一个用来描述数组中元素类型的对象，可以通过创造或指定dtype使用标准Python类型。<br>               另外NumPy提供它自己的数据类型。<br>ndarray.itemsize 数组中每个元素的字节大小。例如，一个元素类型为float64的数组itemsiz属性值为<br>                 8(=64/8),又如，一个元素类型为complex32的数组item属性为4(=32/8)<br>ndarray.data    包含实际数组元素的缓冲区，通常我们不需要使用这个属性，因为我们总是通过索引来使<br>                用数组中的元素。</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h3 id="创建一维数组"><a href="#创建一维数组" class="headerlink" title="创建一维数组"></a>创建一维数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">&gt;&gt;&gt;a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">&gt;&gt;&gt;a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure><h3 id="创建二维数组"><a href="#创建二维数组" class="headerlink" title="创建二维数组"></a>创建二维数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = array( [ (<span class="number">1.5</span>,<span class="number">2</span>,<span class="number">3</span>), (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) ] )</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div></pre></td></tr></table></figure><p>[[ 1.5  2.   3. ]<br> [ 4.   5.   6. ]]<br>数组类型可以在创建时显示指定<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a=np.array([ (<span class="number">1.5</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)],dtype=complex)</div><div class="line"><span class="keyword">print</span> a</div></pre></td></tr></table></figure></p><p>[[ 1.5+0.j  2.0+0.j  3.0+0.j]<br> [ 4.0+0.j  5.0+0.j  6.0+0.j]]<br>通常，数组的元素开始都是未知的，但是它的大小已知。因此，NumPy提供了一些使用占位符创建数组的函数。这最小化了扩展数组的需要和高昂的运算代价。<br><strong>为了创建一个数列，NumPy提供一个类似arange的函数返回数组而不是列表:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a=np.arange(<span class="number">10</span>,<span class="number">30</span>,<span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> a</div></pre></td></tr></table></figure></p><p>[10 15 20 25]<br>当 arange 使用浮点数参数时，由于有限的浮点数精度，通常无法预测获得的元素个数。因此，最好使用函数 linspace 去接收我们想要的元素个数来代替用range来指定步长。</p><h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><p><strong>数组的算术运算是按元素的。新的数组被创建并且被结果填充。</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a=np.array([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>])</div><div class="line">b=np.array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>])</div><div class="line"><span class="keyword">print</span> a-b</div><div class="line"><span class="keyword">print</span> b**<span class="number">2</span></div></pre></td></tr></table></figure></p><p>[1 1 1]<br>[ 1  9 25]<br><strong>有些操作符像 += 和 *= 被用来更改已存在数组而不创建一个新的数组。</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a=np.array([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>])</div><div class="line">b=np.array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>])</div><div class="line">a*=<span class="number">3</span></div></pre></td></tr></table></figure></p><p>[ 6 12 18]<br><strong>当运算的是不同类型的数组时，结果数组和更普遍和精确的已知(这种行为叫做upcast)。</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a=np.linspace(<span class="number">0</span>,np.pi,<span class="number">3</span>)</div><div class="line">b=np.ones(<span class="number">3</span>,dtype=np.int32)</div><div class="line"><span class="keyword">print</span> a</div><div class="line"><span class="keyword">print</span> b</div><div class="line"><span class="keyword">print</span> a+b</div></pre></td></tr></table></figure></p><p>[ 0.          1.57079633  3.14159265]<br>[1 1 1]<br>[ 1.          2.57079633  4.14159265]</p><h2 id="通用函数-ufunc"><a href="#通用函数-ufunc" class="headerlink" title="通用函数(ufunc)"></a>通用函数(ufunc)</h2><p>NumPy提供常见的数学函数如 sin , cos 和 exp 。在NumPy中，这些叫作“通用函数”(ufunc)。在NumPy里这些函数作用按数组的元素运算，产生一个数组作为输出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="keyword">print</span> np.exp(a)</div><div class="line"><span class="keyword">print</span> np.sqrt(a)</div><div class="line"><span class="keyword">print</span> np.square(a)</div></pre></td></tr></table></figure></p><p>[  2.71828183   7.3890561   20.08553692]<br>[ 1.          1.41421356  1.73205081]<br>[1 4 9]<br>更多函数all, alltrue, any, apply along axis, argmax, argmin, argsort, average, bincount, ceil, clip, conj, conjugate, corrcoef, cov, cross, cumprod, cumsum, diff, dot, floor, inner, inv, lexsort, max, maximum, mean, median, min, minimum, nonzero, outer, prod, re, round, sometrue, sort, std, sum, trace, transpose, var, vdot, vectorize, where 参见<a href="https://docs.scipy.org/doc/numpy/reference/routines.html" target="_blank" rel="external">NumPy示例</a></p><h2 id="索引，切片和迭代"><a href="#索引，切片和迭代" class="headerlink" title="索引，切片和迭代"></a>索引，切片和迭代</h2><p>一维 数组可以被索引、切片和迭代，就像 <a href="https://docs.python.org/3/tutorial/introduction.html#SECTION005140000000000000000" target="_blank" rel="external">列表</a> 和其它Python序列。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">a=np.arange(<span class="number">10</span>)</div><div class="line"><span class="keyword">print</span> a</div><div class="line"><span class="keyword">print</span> a**<span class="number">3</span></div><div class="line"><span class="keyword">print</span> a[<span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> a[<span class="number">2</span>:<span class="number">8</span>]</div><div class="line"><span class="keyword">print</span> a[::<span class="number">-1</span>]</div></pre></td></tr></table></figure></p><p>[0 1 2 3 4 5 6 7 8 9]<br>[  0   1   8  27  64 125 216 343 512 729]<br>2<br>[2 3 4 5 6 7]<br>[9 8 7 6 5 4 3 2 1 0]<br>多维 数组可以每个轴有一个索引。这些索引由一个逗号分割的元组给出。</p><h2 id="tile函数"><a href="#tile函数" class="headerlink" title="tile函数"></a>tile函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>numpy.tile([<span class="number">0</span>,<span class="number">0</span>],<span class="number">5</span>)<span class="comment">#在列方向上重复[0,0]5次，默认行1次  </span></div><div class="line">array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>numpy.tile([<span class="number">0</span>,<span class="number">0</span>],(<span class="number">1</span>,<span class="number">1</span>))<span class="comment">#在列方向上重复[0,0]1次，行1次  </span></div><div class="line">array([[<span class="number">0</span>, <span class="number">0</span>]])  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>numpy.tile([<span class="number">0</span>,<span class="number">0</span>],(<span class="number">2</span>,<span class="number">1</span>))<span class="comment">#在列方向上重复[0,0]1次，行2次  </span></div><div class="line">array([[<span class="number">0</span>, <span class="number">0</span>],  </div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>]])  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>numpy.tile([<span class="number">0</span>,<span class="number">0</span>],(<span class="number">3</span>,<span class="number">1</span>))  </div><div class="line">array([[<span class="number">0</span>, <span class="number">0</span>],  </div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>],  </div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>]])  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>numpy.tile([<span class="number">0</span>,<span class="number">0</span>],(<span class="number">1</span>,<span class="number">3</span>))<span class="comment">#在列方向上重复[0,0]3次，行1次  </span></div><div class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>numpy.tile([<span class="number">0</span>,<span class="number">0</span>],(<span class="number">2</span>,<span class="number">3</span>))<span class="comment">#在列方向上重复[0,0]3次，行2次&lt;/span&gt;  </span></div><div class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],  </div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Numpy简介&quot;&gt;&lt;a href=&quot;#Numpy简介&quot; class=&quot;headerlink&quot; title=&quot;Numpy简介&quot;&gt;&lt;/a&gt;Numpy简介&lt;/h2&gt;&lt;p&gt;Numpy是一个用python实现的科学计算包。包括：1、一个强大的N维数组对象Array；2、比较
      
    
    </summary>
    
      <category term="python" scheme="https://blog.devzou.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.devzou.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python中range()函数的用法及数组的操作</title>
    <link href="https://blog.devzou.com/2017/07/04/python/2017-07-05-python%E4%B8%ADrange()%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://blog.devzou.com/2017/07/04/python/2017-07-05-python中range()函数的用法/</id>
    <published>2017-07-04T00:10:09.000Z</published>
    <updated>2018-04-01T09:34:38.888Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">range(<span class="number">1</span>,<span class="number">6</span>) <span class="comment">#代表从1到6(不包含6)</span></div></pre></td></tr></table></figure><p>[1, 2, 3, 4, 5]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">range(<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>) <span class="comment">#代表从1到6，间隔2(不包含6)</span></div></pre></td></tr></table></figure></p><p>[1, 3, 5]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">range(<span class="number">6</span>) <span class="comment">#代表从0到6(不包含6)</span></div></pre></td></tr></table></figure></p><h2 id="数组的操作"><a href="#数组的操作" class="headerlink" title="数组的操作"></a>数组的操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">array = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>]</div><div class="line">array[<span class="number">0</span>:] <span class="comment">#列出0以后的</span></div></pre></td></tr></table></figure><p>[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array[<span class="number">1</span>:] <span class="comment">#列出1以后的</span></div></pre></td></tr></table></figure></p><p>[3, 5, 7, 9, 2, 4, 6, 8, 0]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array[:<span class="number">-1</span>] <span class="comment">#列出-1之前的</span></div></pre></td></tr></table></figure></p><p>[1, 3, 5, 7, 9, 2, 4, 6, 8]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array[<span class="number">3</span>:<span class="number">-3</span>] <span class="comment">#列出3到-3之间的</span></div></pre></td></tr></table></figure></p><p>[7, 9, 2, 4]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array[::<span class="number">2</span>] <span class="comment">#[1, 5, 9, 4, 8]</span></div></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array[::<span class="number">3</span>]<span class="comment">#[1, 7, 4, 0]</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array[::<span class="number">-1</span>]<span class="comment">#数组逆序,[0, 8, 6, 4, 2, 9, 7, 5, 3, 1]</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;li
      
    
    </summary>
    
      <category term="python" scheme="https://blog.devzou.com/categories/python/"/>
    
    
      <category term="python" scheme="https://blog.devzou.com/tags/python/"/>
    
  </entry>
  
</feed>
